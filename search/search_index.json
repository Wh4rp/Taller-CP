{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Informaci\u00f3n B\u00e1sica Clases Horario: 14:00-18:30 Sala B25? (o Sala Javier Pinto, DCC?, esperando que Yessenia me diga) Profesor Pablo Messina ( pamessina@uc.cl ) Ayudante Benjam\u00edn Rubio ( berubio@uc.cl ) Telegram del curso (medio oficial de comunicaci\u00f3n) Unirse Spreadsheet de notas y asistencia: Ver spreadsheet","title":"Home"},{"location":"#informacion-basica","text":"","title":"Informaci\u00f3n B\u00e1sica"},{"location":"#clases","text":"Horario: 14:00-18:30 Sala B25? (o Sala Javier Pinto, DCC?, esperando que Yessenia me diga)","title":"Clases"},{"location":"#profesor","text":"Pablo Messina ( pamessina@uc.cl )","title":"Profesor"},{"location":"#ayudante","text":"Benjam\u00edn Rubio ( berubio@uc.cl )","title":"Ayudante"},{"location":"#telegram-del-curso-medio-oficial-de-comunicacion","text":"Unirse","title":"Telegram del curso (medio oficial de comunicaci\u00f3n)"},{"location":"#spreadsheet-de-notas-y-asistencia","text":"Ver spreadsheet","title":"Spreadsheet de notas y asistencia:"},{"location":"ethics/","text":"\u00c9tica e Integridad Acad\u00e9mica TL;DR You shall not copy-paste c\u00f3digo ajeno (hay penas del infierno por hacer esto). Por un tema pedag\u00f3gico, siempre intenta hacer los problemas por ti mism@ primero. No obstante, si sientes que se est\u00e1 poniendo muy complicada la cosa, tenemos varios tips sobre c\u00f3mo recibir apoyo/ayuda sin salirse de los m\u00e1rgenes de la \u00e9tica (ver detalles abajo). Detalles Puedes hacer uso de recursos en l\u00ednea al resolver problemas. Esto incluye documentaci\u00f3n de tu lenguaje de programaci\u00f3n favorito, descripciones de algoritmos, implementaciones est\u00e1ndar de ciertos algoritmos y estructuras de datos como referencia, wikipedia, youtube, libros, tutoriales, etc. Es m\u00e1s, en caso de desesperaci\u00f3n en este curso est\u00e1 incluso permitido consultar soluciones de ejemplo. Sin embargo, LA COPIA DESCARADA DE SOLUCIONES AJENAS est\u00e1 terminantemente PROHIBIDA . Por favor, NUNCA hagas copy paste de c\u00f3digos ajenos. La idea del curso es que aprendas a programar tus propias soluciones, y hacer copy paste sabotea completamente dicho prop\u00f3sito. Para evitar pasar malos ratos, nuestra recomendaci\u00f3n al enfrentar problemas es la siguiente: Primero intenta resolver los problemas por ti mism@, trata de no usar ning\u00fan recurso externo excepto por quiz\u00e1 documentaci\u00f3n del lenguaje de programaci\u00f3n que est\u00e1s usando (por ej. si se te olvid\u00f3 c\u00f3mo se usaba cierta cosa de la librer\u00eda est\u00e1ndar) Si un problema est\u00e1 muy dif\u00edcil, intenta cambiarte a otro problema m\u00e1s f\u00e1cil (puedes ver los problemas m\u00e1s resueltos en el scoreboard, probablemente son los m\u00e1s f\u00e1ciles). Eventualmente si llegas a un punto en que te sientes pegad@ con todos los problemas que quedan, entonces es tiempo de pedir ayuda. Tanto el profesor como el ayudante estamos a tu disposici\u00f3n para ayudarte en cualquier tipo de duda que tengas, te\u00f3rica, de c\u00f3digo, alg\u00fan bug, lo que sea. Estamos disponibles 24/7/365. Puedes hacernos preguntas por el telegram del curso, chateando uno-a-uno con nosotros por telegram, etc. Adem\u00e1s de nosotros, tambi\u00e9n hay hartas personas con experiencia en progcomp que te pueden ayudar. Si tienes una duda y la planteas abiertamente en el Telegram del curso, todos podremos ayudarte y quiz\u00e1s tu duda le sirva alg\u00fan otr@ compa\u00f1er@ que tenga la misma duda. Si lo anterior no es suficiente, tambi\u00e9n puedes googlear explicaciones te\u00f3ricas (palabras) en internet. Tambi\u00e9n puedes consultar material de estudio, c\u00f3digos de estructuras de datos y algoritmos est\u00e1ndar, etc. Si haces esto, por favor incluye las referencias (links) en tu c\u00f3digo , explicando qu\u00e9 fuentes consultaste y en qu\u00e9 te ayudaron. Si las explicaciones te\u00f3ricas y recursos est\u00e1ndar de referencia no son suficientes, como medida de desesperaci\u00f3n y \u00faltimo recurso te est\u00e1 \u00e9ticamente permitido mirar soluciones ajenas de ejemplo, pero bajo la condici\u00f3n de que por ning\u00fan motivo hagas copy-paste . Esto incluye tanto las soluciones de ejemplo subidas por nosotros (staff) como las soluciones que googlees por tu cuenta de internet. Cualquiera sea el caso, si tomas la decisi\u00f3n de mirar soluciones ajenas, debes referenciar los c\u00f3digos que miraste, dejando bien claro en qu\u00e9 te ayudaron (qu\u00e9 fue lo que entendiste o aprendiste del c\u00f3digo ajeno que consultaste, quiz\u00e1s aprendiste una t\u00e9cnica de programaci\u00f3n que no se te hab\u00eda ocurrido antes?) y dejando bien claro que tu c\u00f3digo NO es un copy-paste del c\u00f3digo ajeno . Finalmente, ten presente que vjudge.net le otorga al autor de un contest acceso a las soluciones de los participantes ... S\u00ed, tanto el profesor como el ayudante tenemos acceso a sus c\u00f3digos . Si alguien misteriosamente resuelve un problema dif\u00edcil, tenga la seguridad de que con probabilidad muy alta su c\u00f3digo ser\u00e1 examinado por nosotros :) Si llegamos a descubrir una copia, el castigo consistir\u00e1 en lo siguiente : 1) Primera copia: nota_final \\(= \\max(\\min(\\operatorname{Nota}_{V3}, 7) - 3, 1)\\) 2) Segunda copia: nota_final \\(= 1 +\\) causal de eliminaci\u00f3n","title":"\u00c9tica e Integridad Acad\u00e9mica"},{"location":"ethics/#etica-e-integridad-academica","text":"","title":"\u00c9tica e Integridad Acad\u00e9mica"},{"location":"ethics/#tldr","text":"You shall not copy-paste c\u00f3digo ajeno (hay penas del infierno por hacer esto). Por un tema pedag\u00f3gico, siempre intenta hacer los problemas por ti mism@ primero. No obstante, si sientes que se est\u00e1 poniendo muy complicada la cosa, tenemos varios tips sobre c\u00f3mo recibir apoyo/ayuda sin salirse de los m\u00e1rgenes de la \u00e9tica (ver detalles abajo).","title":"TL;DR"},{"location":"ethics/#detalles","text":"Puedes hacer uso de recursos en l\u00ednea al resolver problemas. Esto incluye documentaci\u00f3n de tu lenguaje de programaci\u00f3n favorito, descripciones de algoritmos, implementaciones est\u00e1ndar de ciertos algoritmos y estructuras de datos como referencia, wikipedia, youtube, libros, tutoriales, etc. Es m\u00e1s, en caso de desesperaci\u00f3n en este curso est\u00e1 incluso permitido consultar soluciones de ejemplo. Sin embargo, LA COPIA DESCARADA DE SOLUCIONES AJENAS est\u00e1 terminantemente PROHIBIDA . Por favor, NUNCA hagas copy paste de c\u00f3digos ajenos. La idea del curso es que aprendas a programar tus propias soluciones, y hacer copy paste sabotea completamente dicho prop\u00f3sito. Para evitar pasar malos ratos, nuestra recomendaci\u00f3n al enfrentar problemas es la siguiente: Primero intenta resolver los problemas por ti mism@, trata de no usar ning\u00fan recurso externo excepto por quiz\u00e1 documentaci\u00f3n del lenguaje de programaci\u00f3n que est\u00e1s usando (por ej. si se te olvid\u00f3 c\u00f3mo se usaba cierta cosa de la librer\u00eda est\u00e1ndar) Si un problema est\u00e1 muy dif\u00edcil, intenta cambiarte a otro problema m\u00e1s f\u00e1cil (puedes ver los problemas m\u00e1s resueltos en el scoreboard, probablemente son los m\u00e1s f\u00e1ciles). Eventualmente si llegas a un punto en que te sientes pegad@ con todos los problemas que quedan, entonces es tiempo de pedir ayuda. Tanto el profesor como el ayudante estamos a tu disposici\u00f3n para ayudarte en cualquier tipo de duda que tengas, te\u00f3rica, de c\u00f3digo, alg\u00fan bug, lo que sea. Estamos disponibles 24/7/365. Puedes hacernos preguntas por el telegram del curso, chateando uno-a-uno con nosotros por telegram, etc. Adem\u00e1s de nosotros, tambi\u00e9n hay hartas personas con experiencia en progcomp que te pueden ayudar. Si tienes una duda y la planteas abiertamente en el Telegram del curso, todos podremos ayudarte y quiz\u00e1s tu duda le sirva alg\u00fan otr@ compa\u00f1er@ que tenga la misma duda. Si lo anterior no es suficiente, tambi\u00e9n puedes googlear explicaciones te\u00f3ricas (palabras) en internet. Tambi\u00e9n puedes consultar material de estudio, c\u00f3digos de estructuras de datos y algoritmos est\u00e1ndar, etc. Si haces esto, por favor incluye las referencias (links) en tu c\u00f3digo , explicando qu\u00e9 fuentes consultaste y en qu\u00e9 te ayudaron. Si las explicaciones te\u00f3ricas y recursos est\u00e1ndar de referencia no son suficientes, como medida de desesperaci\u00f3n y \u00faltimo recurso te est\u00e1 \u00e9ticamente permitido mirar soluciones ajenas de ejemplo, pero bajo la condici\u00f3n de que por ning\u00fan motivo hagas copy-paste . Esto incluye tanto las soluciones de ejemplo subidas por nosotros (staff) como las soluciones que googlees por tu cuenta de internet. Cualquiera sea el caso, si tomas la decisi\u00f3n de mirar soluciones ajenas, debes referenciar los c\u00f3digos que miraste, dejando bien claro en qu\u00e9 te ayudaron (qu\u00e9 fue lo que entendiste o aprendiste del c\u00f3digo ajeno que consultaste, quiz\u00e1s aprendiste una t\u00e9cnica de programaci\u00f3n que no se te hab\u00eda ocurrido antes?) y dejando bien claro que tu c\u00f3digo NO es un copy-paste del c\u00f3digo ajeno . Finalmente, ten presente que vjudge.net le otorga al autor de un contest acceso a las soluciones de los participantes ... S\u00ed, tanto el profesor como el ayudante tenemos acceso a sus c\u00f3digos . Si alguien misteriosamente resuelve un problema dif\u00edcil, tenga la seguridad de que con probabilidad muy alta su c\u00f3digo ser\u00e1 examinado por nosotros :) Si llegamos a descubrir una copia, el castigo consistir\u00e1 en lo siguiente : 1) Primera copia: nota_final \\(= \\max(\\min(\\operatorname{Nota}_{V3}, 7) - 3, 1)\\) 2) Segunda copia: nota_final \\(= 1 +\\) causal de eliminaci\u00f3n","title":"Detalles"},{"location":"help/","text":"Auxilio, estoy pegad@, no s\u00e9 resolver un problema, no se me ocurre, no s\u00e9 implementarlo, \u00bfqu\u00e9 puedo hacer? En programaci\u00f3n competitiva es normal encontrarse con problemas fuera de nuestra zona de comfort, problemas que nos superan, que nos frustran y que inclusive llegan hasta deprimirnos. Problemas que nos hacen decir \"Oh, y ahora qui\u00e9n podr\u00e1 .. ayudarme?\" . Para esos programadores y programadoras desamparad@s hay buenas noticias: \u00a1existen muchas formas de recibir ayuda! Primero que todo, est\u00e1n los talleres presenciales (3 m\u00f3dulos los d\u00edas viernes). Tanto el profesor como el ayudante estaremos f\u00edsicamente ah\u00ed presentes para que nos bombardeen con preguntas [UPDATE COVID: remotamente presentes en Telegram / Discord / Zoom / etc.]. Tanto c\u00f3digo como teor\u00eda, lo que sea. No tengan miedo, pregunten. Del mismo modo, tambi\u00e9n est\u00e1n sus compa\u00f1er@s. En un curso siempre hay alumn@s m\u00e1s experimentad@s que sobresalen. Aprovechenl@s y h\u00e1ganles preguntas. Conversen. No es necesario estar toda la clase callad@ sin interactuar con nadie. La idea es que aprovechen la instancia presencial para discutir sobre los problemas con sus compa\u00f1er@s y con el staff del curso. Sin embargo, sabemos que la timidez es un problema y no tod@s se sienten c\u00f3mod@s preguntando en persona, por lo cual tambi\u00e9n existen alternativas de ayuda remota: Telegram . Pueden hacer preguntas en el grupo de Telegram del curso. Si necesitan una ayuda m\u00e1s personalizada, Telegram tambi\u00e9n permite chatear directamente con personas (1 a 1), ya sea con el profesor, el ayudante o incluso con sus otros compa\u00f1er@s m\u00e1s experimentad@s. Hints, explicaciones y soluciones de ejemplo . Todas las semanas tanto el profesor como el ayudante estaremos publicando hints, explicaciones y soluciones (c\u00f3digo) de ejemplo para la mayor\u00eda de los problemas de las competencias. Les iremos avisando de esto a lo largo del semestre. La p\u00e1gina del curso (i.e. esta p\u00e1gina), y en general, internet : Si te gusta m\u00e1s estudiar por cuenta propia, en esta p\u00e1gina encontrar\u00e1s mucho material de estudio disponible sobre distintos temas (adem\u00e1s de todo lo que puedas encontrar por tu cuenta en internet).","title":"Necesitas ayuda? Lee esto"},{"location":"help/#auxilio-estoy-pegad-no-se-resolver-un-problema-no-se-me-ocurre-no-se-implementarlo-que-puedo-hacer","text":"En programaci\u00f3n competitiva es normal encontrarse con problemas fuera de nuestra zona de comfort, problemas que nos superan, que nos frustran y que inclusive llegan hasta deprimirnos. Problemas que nos hacen decir \"Oh, y ahora qui\u00e9n podr\u00e1 .. ayudarme?\" . Para esos programadores y programadoras desamparad@s hay buenas noticias: \u00a1existen muchas formas de recibir ayuda! Primero que todo, est\u00e1n los talleres presenciales (3 m\u00f3dulos los d\u00edas viernes). Tanto el profesor como el ayudante estaremos f\u00edsicamente ah\u00ed presentes para que nos bombardeen con preguntas [UPDATE COVID: remotamente presentes en Telegram / Discord / Zoom / etc.]. Tanto c\u00f3digo como teor\u00eda, lo que sea. No tengan miedo, pregunten. Del mismo modo, tambi\u00e9n est\u00e1n sus compa\u00f1er@s. En un curso siempre hay alumn@s m\u00e1s experimentad@s que sobresalen. Aprovechenl@s y h\u00e1ganles preguntas. Conversen. No es necesario estar toda la clase callad@ sin interactuar con nadie. La idea es que aprovechen la instancia presencial para discutir sobre los problemas con sus compa\u00f1er@s y con el staff del curso. Sin embargo, sabemos que la timidez es un problema y no tod@s se sienten c\u00f3mod@s preguntando en persona, por lo cual tambi\u00e9n existen alternativas de ayuda remota: Telegram . Pueden hacer preguntas en el grupo de Telegram del curso. Si necesitan una ayuda m\u00e1s personalizada, Telegram tambi\u00e9n permite chatear directamente con personas (1 a 1), ya sea con el profesor, el ayudante o incluso con sus otros compa\u00f1er@s m\u00e1s experimentad@s. Hints, explicaciones y soluciones de ejemplo . Todas las semanas tanto el profesor como el ayudante estaremos publicando hints, explicaciones y soluciones (c\u00f3digo) de ejemplo para la mayor\u00eda de los problemas de las competencias. Les iremos avisando de esto a lo largo del semestre. La p\u00e1gina del curso (i.e. esta p\u00e1gina), y en general, internet : Si te gusta m\u00e1s estudiar por cuenta propia, en esta p\u00e1gina encontrar\u00e1s mucho material de estudio disponible sobre distintos temas (adem\u00e1s de todo lo que puedas encontrar por tu cuenta en internet).","title":"Auxilio, estoy pegad@, no s\u00e9 resolver un problema, no se me ocurre, no s\u00e9 implementarlo, \u00bfqu\u00e9 puedo hacer?"},{"location":"tips/","text":"Tips para novat@s Sobre lenguajes de programaci\u00f3n En programaci\u00f3n competitiva el lenguaje m\u00e1s utilizado por lejos es C++ (y dentro de C++ generalmente se usa de C++11 para arriba). En segundo lugar se encuentra Java. Y hace muy poco se comenz\u00f3 a utilizar tambi\u00e9n Python . Sin embargo, lamentablemente la mayor\u00eda de los jueces online (los servidores que tienen los enunciados de los problemas y ejecutan los c\u00f3digos enviados por la gente) est\u00e1n calibrados generalmente para aceptar soluciones en C++, y a veces pasa que las soluciones en Python fallan con el famoso Time Limit Exceeded (TLE) , debido a que Python por ser un lenguaje interpretado se ejecuta m\u00e1s lento que lenguajes compilados a c\u00f3digo de m\u00e1quina como C++. Adem\u00e1s, la mayor\u00eda de los c\u00f3digos de ejemplo disponibles en internet para progcomp est\u00e1n en C++ o quiz\u00e1 Java. Por este motivo, el consejo t\u00edpico es aprender C++. Si te motivas a seguir este consejo, en la secci\u00f3n para aprender C++ puedes encontrar bastante material para aprender. Dicho esto, que esto por favor no se malinterprete como que usar C++ es una obligaci\u00f3n. No, no. Si lo deseas, puedes usar Python, no hay ning\u00fan problema con eso. De hecho en muchos problemas las restricciones de tiempo son suficientemente holgadas y usar Python es perfectamente v\u00e1lido. El objetivo de este comentario es simplemente hacerte conciente de que al usar Python existe cierto riesgo de TLE por jueces \"pesados\" con restricciones de tiempo muy estrictas, y tambi\u00e9n que C++ es por lejos el lenguaje m\u00e1s popular en programaci\u00f3n competitiva. Si decides aprender C++, nuestro consejo es que vayas aprendiendo poco a poco, sin estresarte. Por ejemplo puedes ir intercalando entre C++ y Python. O puedes programar una soluci\u00f3n en Python y despu\u00e9s traducirla a C++, etc. Adem\u00e1s siempre estaremos subiendo ejemplos de soluciones en C++, y tanto el profesor como el ayudante estaremos disponibles para que nos hagas todas las consultas que necesites. Sobre restricciones de tiempo y memoria en programaci\u00f3n competitiva En la ICPC y en la mayor\u00eda de los jueces online de entrenamiento los problemas tienen l\u00edmites de tiempo (ej. 3 segundos) y memoria (ej. 256 MB). Esto significa que soluciones muy lentas o soluciones que requieren anotar demasiadas cosas no funcionar\u00e1n . En C++ pueden hacerse un poco m\u00e1s de \\(10^8\\) operaciones baratas por segundo (una estimaci\u00f3n bien al ojo por experiencia con diferentes jueces online). Por lo tanto, si les dan \\(K\\) segundos de tiempo l\u00edmite, a lo m\u00e1s podr\u00e1n hacer un poco m\u00e1s de \\(K \\cdot 10^8\\) operaciones baratas. Tengan esto muy presente. MUY IMPORTANTE : ANTES DE TOCAR EL TECLADO, ANTES DE ESCRIBIR LA PRIMERA L\u00cdNEA DE C\u00d3DIGO , es sumamente importante estimar cu\u00e1nto se va a demorar la estrategia/algoritmo que quiero programar. Nadie quiere desperdiciar su tiempo programando una soluci\u00f3n que despu\u00e9s es muy lenta y nos da TLE (Time Limit Exceeded). Es por esto que siempre deben estimar la complejidad computacional de su algoritmo y evaluarla en el caso borde m\u00e1s grande (peor caso). Por ejemplo, si un problema depende de \\(N\\) donde \\(1 \\leq N \\leq 10^5\\) y mi algoritmo es cuadr\u00e1tico (complejidad \\(= \\mathcal{O}(N^2)\\) ), entonces en el peor caso har\u00e9 \\((10^5)^2 = 10^{10}\\) operaciones, y por ende seg\u00fan el punto anterior necesitar\u00eda 100 segundos para correrlo. En cambio, si mi algoritmo tiene complejidad \\(\\mathcal{O}(N\\cdot\\log(N))\\) entonces en el peor caso s\u00f3lo har\u00e9 \\(10^5 \\cdot \\log(10^5) = 1.7 \\cdot 10^6\\) operaciones (aprox.), y por ende s\u00f3lo necesitar\u00eda \\(0.017\\) segundos (la nada misma) para correrlo. Entonces, si mi problema tiene un tiempo m\u00e1ximo de ejecuci\u00f3n de 2 segundos, \u00bfqu\u00e9 algoritmo va a funcionar? Claramente el segundo. Si van a usar mucha memoria, preoc\u00fapense de no pasarse del l\u00edmite de memoria permitido . Por ejemplo si les dan 256MB de memoria, en bytes eso es \\(256 \\cdot 1024 \\cdot 1024 = 268435456\\) bytes, un int32 ocupa 4 bytes, as\u00ed que como m\u00e1ximo podr\u00edan crear un arreglo de int32 de largo \\(67108864 = 6.7 \\cdot 10^7\\) aprox (o la mitad si usan un int64, un double, etc.). Tambi\u00e9n podr\u00eda acab\u00e1rseles la memoria si hacen demasiadas llamadas recursivas [ 1 , 2 ].","title":"Tips para novat@s"},{"location":"tips/#tips-para-novats","text":"","title":"Tips para novat@s"},{"location":"tips/#sobre-lenguajes-de-programacion","text":"En programaci\u00f3n competitiva el lenguaje m\u00e1s utilizado por lejos es C++ (y dentro de C++ generalmente se usa de C++11 para arriba). En segundo lugar se encuentra Java. Y hace muy poco se comenz\u00f3 a utilizar tambi\u00e9n Python . Sin embargo, lamentablemente la mayor\u00eda de los jueces online (los servidores que tienen los enunciados de los problemas y ejecutan los c\u00f3digos enviados por la gente) est\u00e1n calibrados generalmente para aceptar soluciones en C++, y a veces pasa que las soluciones en Python fallan con el famoso Time Limit Exceeded (TLE) , debido a que Python por ser un lenguaje interpretado se ejecuta m\u00e1s lento que lenguajes compilados a c\u00f3digo de m\u00e1quina como C++. Adem\u00e1s, la mayor\u00eda de los c\u00f3digos de ejemplo disponibles en internet para progcomp est\u00e1n en C++ o quiz\u00e1 Java. Por este motivo, el consejo t\u00edpico es aprender C++. Si te motivas a seguir este consejo, en la secci\u00f3n para aprender C++ puedes encontrar bastante material para aprender. Dicho esto, que esto por favor no se malinterprete como que usar C++ es una obligaci\u00f3n. No, no. Si lo deseas, puedes usar Python, no hay ning\u00fan problema con eso. De hecho en muchos problemas las restricciones de tiempo son suficientemente holgadas y usar Python es perfectamente v\u00e1lido. El objetivo de este comentario es simplemente hacerte conciente de que al usar Python existe cierto riesgo de TLE por jueces \"pesados\" con restricciones de tiempo muy estrictas, y tambi\u00e9n que C++ es por lejos el lenguaje m\u00e1s popular en programaci\u00f3n competitiva. Si decides aprender C++, nuestro consejo es que vayas aprendiendo poco a poco, sin estresarte. Por ejemplo puedes ir intercalando entre C++ y Python. O puedes programar una soluci\u00f3n en Python y despu\u00e9s traducirla a C++, etc. Adem\u00e1s siempre estaremos subiendo ejemplos de soluciones en C++, y tanto el profesor como el ayudante estaremos disponibles para que nos hagas todas las consultas que necesites.","title":"Sobre lenguajes de programaci\u00f3n"},{"location":"tips/#sobre-restricciones-de-tiempo-y-memoria-en-programacion-competitiva","text":"En la ICPC y en la mayor\u00eda de los jueces online de entrenamiento los problemas tienen l\u00edmites de tiempo (ej. 3 segundos) y memoria (ej. 256 MB). Esto significa que soluciones muy lentas o soluciones que requieren anotar demasiadas cosas no funcionar\u00e1n . En C++ pueden hacerse un poco m\u00e1s de \\(10^8\\) operaciones baratas por segundo (una estimaci\u00f3n bien al ojo por experiencia con diferentes jueces online). Por lo tanto, si les dan \\(K\\) segundos de tiempo l\u00edmite, a lo m\u00e1s podr\u00e1n hacer un poco m\u00e1s de \\(K \\cdot 10^8\\) operaciones baratas. Tengan esto muy presente. MUY IMPORTANTE : ANTES DE TOCAR EL TECLADO, ANTES DE ESCRIBIR LA PRIMERA L\u00cdNEA DE C\u00d3DIGO , es sumamente importante estimar cu\u00e1nto se va a demorar la estrategia/algoritmo que quiero programar. Nadie quiere desperdiciar su tiempo programando una soluci\u00f3n que despu\u00e9s es muy lenta y nos da TLE (Time Limit Exceeded). Es por esto que siempre deben estimar la complejidad computacional de su algoritmo y evaluarla en el caso borde m\u00e1s grande (peor caso). Por ejemplo, si un problema depende de \\(N\\) donde \\(1 \\leq N \\leq 10^5\\) y mi algoritmo es cuadr\u00e1tico (complejidad \\(= \\mathcal{O}(N^2)\\) ), entonces en el peor caso har\u00e9 \\((10^5)^2 = 10^{10}\\) operaciones, y por ende seg\u00fan el punto anterior necesitar\u00eda 100 segundos para correrlo. En cambio, si mi algoritmo tiene complejidad \\(\\mathcal{O}(N\\cdot\\log(N))\\) entonces en el peor caso s\u00f3lo har\u00e9 \\(10^5 \\cdot \\log(10^5) = 1.7 \\cdot 10^6\\) operaciones (aprox.), y por ende s\u00f3lo necesitar\u00eda \\(0.017\\) segundos (la nada misma) para correrlo. Entonces, si mi problema tiene un tiempo m\u00e1ximo de ejecuci\u00f3n de 2 segundos, \u00bfqu\u00e9 algoritmo va a funcionar? Claramente el segundo. Si van a usar mucha memoria, preoc\u00fapense de no pasarse del l\u00edmite de memoria permitido . Por ejemplo si les dan 256MB de memoria, en bytes eso es \\(256 \\cdot 1024 \\cdot 1024 = 268435456\\) bytes, un int32 ocupa 4 bytes, as\u00ed que como m\u00e1ximo podr\u00edan crear un arreglo de int32 de largo \\(67108864 = 6.7 \\cdot 10^7\\) aprox (o la mitad si usan un int64, un double, etc.). Tambi\u00e9n podr\u00eda acab\u00e1rseles la memoria si hacen demasiadas llamadas recursivas [ 1 , 2 ].","title":"Sobre restricciones de tiempo y memoria en programaci\u00f3n competitiva"},{"location":"about/grading/","text":"C\u00e1lculo de la Nota Final Sea \\(P_i =\\) total puntos por problemas resueltos dentro de plazo en el contest \\(i\\) -\u00e9simo Sea \\(T_i =\\) total puntos por problemas resueltos fuera de plazo en el contest \\(i\\) -\u00e9simo Sea \\(M_i =\\) puntaje m\u00ednimo esperado para el contest \\(i\\) -\u00e9simo Sea \\(A_i = 1\\) si viniste a clases para el contest \\(i\\) -\u00e9simo, \\(0\\) si no Sea \\(N =\\) n\u00famero de contests As\u00ed, se calcula: \\(D_i = \\max(M_i - P_i, 0) =\\) deuda de puntaje del contest \\(i\\) -\u00e9simo \\(PA_i = 3\\) si vienes a clase, \\(\\max(0, \\min(3, P_i - M_i))\\) si no vienes \\(E_i = \\max(P_i - M_i, 0) + T_i - (1-A_i) \\cdot PA_i =\\) excedente de puntaje del contest \\(i\\) -\u00e9simo, considerando posible descuento por inasistencia \\(X_i = 1 - \\frac{D_i}{M_i} =\\) fracci\u00f3n completada del m\u00ednimo esperado para el contest \\(i\\) -\u00e9simo \\(D =\\) suma de todos los \\(D_i\\) \\(E =\\) suma de todos los \\(E_i\\) \\(X =\\) promedio de todos los \\(X_i\\) \\(A = \\frac{\\min(1, \\sum PA_i)}{(3 \\cdot (N-2))}\\) , el \\(-2\\) considera dos d\u00edas de inasistencia perdonados As\u00ed, \\(E\\) se usa para reducir la deuda \\(D\\) de la siguiente manera: \\(D' = \\max(D - E \\cdot 0.3, 0)\\) \\(X' = X + (1-X) \\cdot \\frac{(D-D')}{D}\\) As\u00ed, se obtiene una nota preliminar - \\(\\operatorname{Nota}_{V1} = (1 + 6 \\cdot X') \\cdot 0.75 + (1 + 6 \\cdot A) \\cdot 0.25\\) Sin embargo, luego se bajar\u00e1 la escala del curso, es decir, si ning\u00fan alumno alcanz\u00f3 el \\(7\\) , el alumno con mayor nota quedar\u00e1 con \\(7\\) (siempre y cuando la escala baje \"poco\" - i.e. habr\u00e1 un l\u00edmite para bajar la escala con el fin de prevenir \"hacks\" al sistema). \\(\\operatorname{Nota}_{V2} =\\) aplicar_escala_reducida( \\(\\operatorname{Nota}_{V1}\\) ) Luego se calcula las d\u00e9cimas de bonus efectivas: \\(B = (BCpp + BRPC + BCI) \\cdot \\frac{(\\operatorname{Nota}_{V1} - 1)}{6}\\) Finalmente, la nota final est\u00e1 dada por: \\(\\operatorname{Nota}_{V3} = \\operatorname{Nota}_{V2} + B\\) Todo lo anterior se encuentra formalizado en el spreadsheet de notas y asistencia: link","title":"C\u00e1lculo de la Nota Final"},{"location":"about/grading/#calculo-de-la-nota-final","text":"Sea \\(P_i =\\) total puntos por problemas resueltos dentro de plazo en el contest \\(i\\) -\u00e9simo Sea \\(T_i =\\) total puntos por problemas resueltos fuera de plazo en el contest \\(i\\) -\u00e9simo Sea \\(M_i =\\) puntaje m\u00ednimo esperado para el contest \\(i\\) -\u00e9simo Sea \\(A_i = 1\\) si viniste a clases para el contest \\(i\\) -\u00e9simo, \\(0\\) si no Sea \\(N =\\) n\u00famero de contests As\u00ed, se calcula: \\(D_i = \\max(M_i - P_i, 0) =\\) deuda de puntaje del contest \\(i\\) -\u00e9simo \\(PA_i = 3\\) si vienes a clase, \\(\\max(0, \\min(3, P_i - M_i))\\) si no vienes \\(E_i = \\max(P_i - M_i, 0) + T_i - (1-A_i) \\cdot PA_i =\\) excedente de puntaje del contest \\(i\\) -\u00e9simo, considerando posible descuento por inasistencia \\(X_i = 1 - \\frac{D_i}{M_i} =\\) fracci\u00f3n completada del m\u00ednimo esperado para el contest \\(i\\) -\u00e9simo \\(D =\\) suma de todos los \\(D_i\\) \\(E =\\) suma de todos los \\(E_i\\) \\(X =\\) promedio de todos los \\(X_i\\) \\(A = \\frac{\\min(1, \\sum PA_i)}{(3 \\cdot (N-2))}\\) , el \\(-2\\) considera dos d\u00edas de inasistencia perdonados As\u00ed, \\(E\\) se usa para reducir la deuda \\(D\\) de la siguiente manera: \\(D' = \\max(D - E \\cdot 0.3, 0)\\) \\(X' = X + (1-X) \\cdot \\frac{(D-D')}{D}\\) As\u00ed, se obtiene una nota preliminar - \\(\\operatorname{Nota}_{V1} = (1 + 6 \\cdot X') \\cdot 0.75 + (1 + 6 \\cdot A) \\cdot 0.25\\) Sin embargo, luego se bajar\u00e1 la escala del curso, es decir, si ning\u00fan alumno alcanz\u00f3 el \\(7\\) , el alumno con mayor nota quedar\u00e1 con \\(7\\) (siempre y cuando la escala baje \"poco\" - i.e. habr\u00e1 un l\u00edmite para bajar la escala con el fin de prevenir \"hacks\" al sistema). \\(\\operatorname{Nota}_{V2} =\\) aplicar_escala_reducida( \\(\\operatorname{Nota}_{V1}\\) ) Luego se calcula las d\u00e9cimas de bonus efectivas: \\(B = (BCpp + BRPC + BCI) \\cdot \\frac{(\\operatorname{Nota}_{V1} - 1)}{6}\\) Finalmente, la nota final est\u00e1 dada por: \\(\\operatorname{Nota}_{V3} = \\operatorname{Nota}_{V2} + B\\) Todo lo anterior se encuentra formalizado en el spreadsheet de notas y asistencia: link","title":"C\u00e1lculo de la Nota Final"},{"location":"about/how_course_works/","text":"C\u00f3mo funciona el curso 1) Competencias Semanales Este curso es 100% pr\u00e1ctico. La nota final depender\u00e1 de la resoluci\u00f3n por parte del alumno de problemas de programaci\u00f3n competitiva. Cada semana se publicar\u00e1 un contest (o competencia, en espa\u00f1ol). Los contests se caracterizan por lo siguiente: Se publicar\u00e1n en vjudge.net , un sitio web que permite crear competencias utilizando problemas obtenidos de m\u00faltiples jueces online, con un scoreboard que se actualiza en tiempo real a medida que los participantes resuelven problemas. Para competir es necesario que te crees una cuenta en vjudge.net y posteriormente que te unas con dicha cuenta a los contests a medida que estos vayan siendo publicados. A menos que se indique lo contrario, todas las competencias ser\u00e1n individuales . Excepcionalmente, hacia el final del semestre es posible que una que otra competencia sea de car\u00e1cter grupal , con un m\u00e1ximo de 3 integrantes por grupo (esto ser\u00e1 avisado si se llega a realizar). En general los contests ser\u00e1n tem\u00e1ticos. Es decir, cada contest estar\u00e1 compuesto por problemas que se resuelven utilizando estrategias pertenecientes a una categor\u00eda o tema com\u00fan (ej. fuerza bruta, geometr\u00eda, grafos, strings, etc.). El tema del contest se avisar\u00e1 con anticipaci\u00f3n junto con una recomendaci\u00f3n de material de estudio que los alumnos podr\u00e1n revisar antes de la clase. En general el primer m\u00f3dulo de cada clase (14:00 - 15:30) ser\u00e1 de c\u00e1tedra . La idea es revisar contenidos relevantes para el contest de la semana. Esto significa revisar la teor\u00eda, ver c\u00f3digos de ejemplo y quiz\u00e1 explicar la soluci\u00f3n de alg\u00fan problema que aparecer\u00e1 en el contest. Tambi\u00e9n es muy com\u00fan discutir soluciones de problemas del contest pasado en este bloque. El resto de la clase (15:30 en adelante) es pr\u00e1ctico. La idea es que durante los dos m\u00f3dulos restantes los alumnos trabajen en sus computadores programando. Por esto se recomienda que cada uno traiga su laptop a la clase . Si no tienes laptop, por favor avisa al staff del curso con anticipaci\u00f3n para poder coordinar laptops de repuesto. [Nota COVID: esto, obviamente, no aplica en formato de clase remoto] Salvo en contest grupales, cada alumn@ debe programar su propia soluci\u00f3n . Copiar c\u00f3digo ajeno est\u00e1 terminantemente prohibido . Sin embargo, s\u00ed est\u00e1 permitido conversar sobre los problemas, compartir ideas y discutir posibles soluciones con sus compa\u00f1er@s. Adem\u00e1s, tanto el profesor como el ayudante estamos disponibles para atender sus dudas y preguntas sobre los problemas, sobre c\u00f3digo, sobre teor\u00eda, etc. Los problemas de cada contest tendr\u00e1n diferentes niveles de dificultad, algunos problemas son m\u00e1s f\u00e1ciles y otros m\u00e1s dif\u00edciles. Por ende, cada problema tendr\u00e1 asociado un puntaje seg\u00fan su nivel de dificultad, y los puntos que obtengas en el contest ser\u00e1n la suma de los puntos de los problemas que resuelvas. Estos puntajes se mantendr\u00e1n intencionalmente ocultos por un par de d\u00edas luego de iniciado el contest :) Puntajes: regalado (1), f\u00e1cil (2), medio-f\u00e1cil (3), medio (4), medio-dif\u00edcil (5), dif\u00edcil (6), muy dif\u00edcil (7), demasiado dif\u00edcil (8 o m\u00e1s) Cada contest tendr\u00e1 un puntaje m\u00ednimo esperado , si en el contest logras un puntaje >= a dicho m\u00ednimo obtienes un 100% de completado en el contest, de lo contrario obtienes un porcentaje inferior y una deuda de puntaje . Todas las deudas de puntaje de todos tus contests se suman y conforman tu deuda de puntaje total . No obstante, si tu puntaje para un contest supera el m\u00ednimo esperado, se genera un excedente de puntaje , y del mismo modo todos tus excedentes se suman y conforman tu excedente de puntaje total . Como es de esperar, el excedente de puntaje te puede ayudar a compensar tu deuda de puntaje y subir tu nota, aunque ten en cuenta que el excedente de puntaje es multiplicado por un coeficiente de 0.3. vjudge permite enviar soluciones en modo post-competencia . Si lo deseas puedes seguir resolviendo problemas en este modo luego del fin de un contest, aunque todos los puntos de los problemas que resuelvas as\u00ed van directo a tu excedente de puntaje, y por ende ser\u00e1n multiplicados por 0.3 (en otras palabras, rinde m\u00e1s resolver problemas dentro de plazo que fuera de plazo) 2) Asistencia Para fomentar la participaci\u00f3n y asistencia a clases, este curso incluye nota por asistencia, la cual corresponde al 25% de la nota del curso. Para quedar presente eso s\u00ed s\u00f3lo basta con que vengas a un modulo, no es necesario que est\u00e9s presente toda la clase, aunque si pudieras quedarte los 3 m\u00f3dulos ser\u00eda estupendo! En caso de inasistencia, existe la posibilidad de recuperar (parcial o totalmente) la asistencia de ese d\u00eda haciendo m\u00e1s problemas del contest respectivo. Para este efecto, vamos a considerar que una asistencia vale 3 puntos. Si faltas a una clase pero en el contest respectivo tu excedente de puntaje es mayor o igual a 3, se considerar\u00e1 como si hubieras asistido (obviamente, esos 3 puntos no se contabilizar\u00e1n en tu excedente de puntaje total). En cambio, si tu excedente de puntaje es menor a 3, la asistencia se recuperar\u00e1 s\u00f3lo \"parcialmente\". En otras palabras, los que lo deseen pueden hacer el curso entero desde la casa, pero tendr\u00e1n que programar m\u00e1s :) Adem\u00e1s, se perdonar\u00e1n 2 inasistencias. Es decir, puedes faltar a dos clases sin necesidad de recuperar la asistencia y tu nota no ser\u00e1 afectada. 3) Bonuses Adem\u00e1s de las competencias semanales, existen varias formas de obtener d\u00e9cimas de bonus, las que se ponderar\u00e1n y sumar\u00e1n directamente a tu nota final: 3.1) BONUS C++ Bonus para incentivar el uso de C++ (el lenguaje m\u00e1s popular en progcomp). \u00bfC\u00f3mo obtener este bonus? Primero que todo, este bonus es v\u00e1lido s\u00f3lo para gente sin (o con demasiada poca) experiencia previa programando en C++. Si ya tienes experiencia en C++ (o en C, que es muy parecido), este bonus no es para ti. Para obtener este bonus, en alg\u00fan momento durante el semestre debes avisarnos que quieres cobrar este bonus. Debes indicarnos los contests y respectivos problemas que has hecho en C++. Nosotros revisaremos tus c\u00f3digos. Para obtener el 100% del bonus, se debe notar un dominio progresivo de C++ en tus c\u00f3digos. Haber logrado resolver al menos un problema complicado en C++ es un plus. Puedes obtener hasta un m\u00e1ximo de 10 d\u00e9cimas con este bonus. Este bonus s\u00f3lo puede ser cobrado una vez en todo el semestre (una posibilidad es esperar hasta el final del semestre y ah\u00ed reci\u00e9n cobrarlo). Si quieres aprender C++, puedes encontrar hartos recursos ac\u00e1 . 3.2) BONUS RPC (grupal) Cada cierto tiempo la Red de Programaci\u00f3n Competitiva (RPC) organiza competencias de entrenamiento. El calendario y registro para estas competencias se encuentran ac\u00e1: http://registro.redprogramacioncompetitiva.com/contests , y los scoreboards de las competencias pasadas se pueden encontrar ac\u00e1: http://redprogramacioncompetitiva.com/Contest . N\u00f3tese que se trata de un bonus grupal , por ende para obtener este bonus deben: Registrarse en una competencia en grupos de 2 o 3 alumn@s. Participar en la competencia Mandar una foto del grupo con todos sus integrantes juntos frente a un mismo computador (necesitamos evidencia de que se juntaron, y adem\u00e1s la idea es que sea lo m\u00e1s parecido a un simulacro de la ICPC, donde los 3 integrantes comparten un mismo PC, como en este ejemplo ). [Nota COVID: en caso de pandemia, se acepta un screenshot de zoom, skype, etc.] Al terminar la competencia, deben mandar el link al scoreboard final de la competencia RPC en que participaron. El bonus se calcular\u00e1 como 5*(X/N) d\u00e9cimas, donde X = problemas resueltos por el grupo, N = problemas resueltos por el equipo que qued\u00f3 en primer lugar. Las 5*(X/N) d\u00e9cimas obtenidas se sumar\u00e1n a las d\u00e9cimas de bonus de cada integrante del equipo. 3.3) BONUS Contest Individual: Existen muchos sitios online que organizan competencias individuales cada cierto tiempo. Los alumnos tienen la opci\u00f3n de participar en estas competencias y obtener d\u00e9cimas de bonus. Los sitios que m\u00e1s recomendamos son Codeforces , Atcoder y Codechef . Todos tienen calendarios: calendario codeforces , calendario atcoder , calendario codechef . Para obtener este bonus debes: Registrarte en Codeforces, Atcoder y/o Codechef. Participar en una competencia individual (generalmente duran alrededor de 2 horas). Al final de la competencia avisarnos en qu\u00e9 competencia participaste y mandar el link al ranking donde quedaste. El bonus se calcular\u00e1 como 3*(X/N) d\u00e9cimas, donde X = cantidad de problemas resueltos por ti, N = cantidad de problemas resueltos por la persona que qued\u00f3 en primer lugar. Las 3*(X/N) d\u00e9cimas obtenidas se sumar\u00e1n a tus d\u00e9cimas de bonus. 3.4) SUPER BONUS Codeforces: Codeforces tiene un sistema de rating parecido al ELO en Ajedrez. Cualquier alumn@ que participe en al menos 3 contests de Codeforces durante el semestre y luego de ello alcance un rating de 1700 o superior , autom\u00e1ticamente tendr\u00e1 nota final 7.0 en el curso .","title":"C\u00f3mo funciona el curso"},{"location":"about/how_course_works/#como-funciona-el-curso","text":"","title":"C\u00f3mo funciona el curso"},{"location":"about/how_course_works/#1-competencias-semanales","text":"Este curso es 100% pr\u00e1ctico. La nota final depender\u00e1 de la resoluci\u00f3n por parte del alumno de problemas de programaci\u00f3n competitiva. Cada semana se publicar\u00e1 un contest (o competencia, en espa\u00f1ol). Los contests se caracterizan por lo siguiente: Se publicar\u00e1n en vjudge.net , un sitio web que permite crear competencias utilizando problemas obtenidos de m\u00faltiples jueces online, con un scoreboard que se actualiza en tiempo real a medida que los participantes resuelven problemas. Para competir es necesario que te crees una cuenta en vjudge.net y posteriormente que te unas con dicha cuenta a los contests a medida que estos vayan siendo publicados. A menos que se indique lo contrario, todas las competencias ser\u00e1n individuales . Excepcionalmente, hacia el final del semestre es posible que una que otra competencia sea de car\u00e1cter grupal , con un m\u00e1ximo de 3 integrantes por grupo (esto ser\u00e1 avisado si se llega a realizar). En general los contests ser\u00e1n tem\u00e1ticos. Es decir, cada contest estar\u00e1 compuesto por problemas que se resuelven utilizando estrategias pertenecientes a una categor\u00eda o tema com\u00fan (ej. fuerza bruta, geometr\u00eda, grafos, strings, etc.). El tema del contest se avisar\u00e1 con anticipaci\u00f3n junto con una recomendaci\u00f3n de material de estudio que los alumnos podr\u00e1n revisar antes de la clase. En general el primer m\u00f3dulo de cada clase (14:00 - 15:30) ser\u00e1 de c\u00e1tedra . La idea es revisar contenidos relevantes para el contest de la semana. Esto significa revisar la teor\u00eda, ver c\u00f3digos de ejemplo y quiz\u00e1 explicar la soluci\u00f3n de alg\u00fan problema que aparecer\u00e1 en el contest. Tambi\u00e9n es muy com\u00fan discutir soluciones de problemas del contest pasado en este bloque. El resto de la clase (15:30 en adelante) es pr\u00e1ctico. La idea es que durante los dos m\u00f3dulos restantes los alumnos trabajen en sus computadores programando. Por esto se recomienda que cada uno traiga su laptop a la clase . Si no tienes laptop, por favor avisa al staff del curso con anticipaci\u00f3n para poder coordinar laptops de repuesto. [Nota COVID: esto, obviamente, no aplica en formato de clase remoto] Salvo en contest grupales, cada alumn@ debe programar su propia soluci\u00f3n . Copiar c\u00f3digo ajeno est\u00e1 terminantemente prohibido . Sin embargo, s\u00ed est\u00e1 permitido conversar sobre los problemas, compartir ideas y discutir posibles soluciones con sus compa\u00f1er@s. Adem\u00e1s, tanto el profesor como el ayudante estamos disponibles para atender sus dudas y preguntas sobre los problemas, sobre c\u00f3digo, sobre teor\u00eda, etc. Los problemas de cada contest tendr\u00e1n diferentes niveles de dificultad, algunos problemas son m\u00e1s f\u00e1ciles y otros m\u00e1s dif\u00edciles. Por ende, cada problema tendr\u00e1 asociado un puntaje seg\u00fan su nivel de dificultad, y los puntos que obtengas en el contest ser\u00e1n la suma de los puntos de los problemas que resuelvas. Estos puntajes se mantendr\u00e1n intencionalmente ocultos por un par de d\u00edas luego de iniciado el contest :) Puntajes: regalado (1), f\u00e1cil (2), medio-f\u00e1cil (3), medio (4), medio-dif\u00edcil (5), dif\u00edcil (6), muy dif\u00edcil (7), demasiado dif\u00edcil (8 o m\u00e1s) Cada contest tendr\u00e1 un puntaje m\u00ednimo esperado , si en el contest logras un puntaje >= a dicho m\u00ednimo obtienes un 100% de completado en el contest, de lo contrario obtienes un porcentaje inferior y una deuda de puntaje . Todas las deudas de puntaje de todos tus contests se suman y conforman tu deuda de puntaje total . No obstante, si tu puntaje para un contest supera el m\u00ednimo esperado, se genera un excedente de puntaje , y del mismo modo todos tus excedentes se suman y conforman tu excedente de puntaje total . Como es de esperar, el excedente de puntaje te puede ayudar a compensar tu deuda de puntaje y subir tu nota, aunque ten en cuenta que el excedente de puntaje es multiplicado por un coeficiente de 0.3. vjudge permite enviar soluciones en modo post-competencia . Si lo deseas puedes seguir resolviendo problemas en este modo luego del fin de un contest, aunque todos los puntos de los problemas que resuelvas as\u00ed van directo a tu excedente de puntaje, y por ende ser\u00e1n multiplicados por 0.3 (en otras palabras, rinde m\u00e1s resolver problemas dentro de plazo que fuera de plazo)","title":"1) Competencias Semanales"},{"location":"about/how_course_works/#2-asistencia","text":"Para fomentar la participaci\u00f3n y asistencia a clases, este curso incluye nota por asistencia, la cual corresponde al 25% de la nota del curso. Para quedar presente eso s\u00ed s\u00f3lo basta con que vengas a un modulo, no es necesario que est\u00e9s presente toda la clase, aunque si pudieras quedarte los 3 m\u00f3dulos ser\u00eda estupendo! En caso de inasistencia, existe la posibilidad de recuperar (parcial o totalmente) la asistencia de ese d\u00eda haciendo m\u00e1s problemas del contest respectivo. Para este efecto, vamos a considerar que una asistencia vale 3 puntos. Si faltas a una clase pero en el contest respectivo tu excedente de puntaje es mayor o igual a 3, se considerar\u00e1 como si hubieras asistido (obviamente, esos 3 puntos no se contabilizar\u00e1n en tu excedente de puntaje total). En cambio, si tu excedente de puntaje es menor a 3, la asistencia se recuperar\u00e1 s\u00f3lo \"parcialmente\". En otras palabras, los que lo deseen pueden hacer el curso entero desde la casa, pero tendr\u00e1n que programar m\u00e1s :) Adem\u00e1s, se perdonar\u00e1n 2 inasistencias. Es decir, puedes faltar a dos clases sin necesidad de recuperar la asistencia y tu nota no ser\u00e1 afectada.","title":"2) Asistencia"},{"location":"about/how_course_works/#3-bonuses","text":"Adem\u00e1s de las competencias semanales, existen varias formas de obtener d\u00e9cimas de bonus, las que se ponderar\u00e1n y sumar\u00e1n directamente a tu nota final:","title":"3) Bonuses"},{"location":"about/how_course_works/#31-bonus-c","text":"Bonus para incentivar el uso de C++ (el lenguaje m\u00e1s popular en progcomp). \u00bfC\u00f3mo obtener este bonus? Primero que todo, este bonus es v\u00e1lido s\u00f3lo para gente sin (o con demasiada poca) experiencia previa programando en C++. Si ya tienes experiencia en C++ (o en C, que es muy parecido), este bonus no es para ti. Para obtener este bonus, en alg\u00fan momento durante el semestre debes avisarnos que quieres cobrar este bonus. Debes indicarnos los contests y respectivos problemas que has hecho en C++. Nosotros revisaremos tus c\u00f3digos. Para obtener el 100% del bonus, se debe notar un dominio progresivo de C++ en tus c\u00f3digos. Haber logrado resolver al menos un problema complicado en C++ es un plus. Puedes obtener hasta un m\u00e1ximo de 10 d\u00e9cimas con este bonus. Este bonus s\u00f3lo puede ser cobrado una vez en todo el semestre (una posibilidad es esperar hasta el final del semestre y ah\u00ed reci\u00e9n cobrarlo). Si quieres aprender C++, puedes encontrar hartos recursos ac\u00e1 .","title":"3.1) BONUS C++"},{"location":"about/how_course_works/#32-bonus-rpc-grupal","text":"Cada cierto tiempo la Red de Programaci\u00f3n Competitiva (RPC) organiza competencias de entrenamiento. El calendario y registro para estas competencias se encuentran ac\u00e1: http://registro.redprogramacioncompetitiva.com/contests , y los scoreboards de las competencias pasadas se pueden encontrar ac\u00e1: http://redprogramacioncompetitiva.com/Contest . N\u00f3tese que se trata de un bonus grupal , por ende para obtener este bonus deben: Registrarse en una competencia en grupos de 2 o 3 alumn@s. Participar en la competencia Mandar una foto del grupo con todos sus integrantes juntos frente a un mismo computador (necesitamos evidencia de que se juntaron, y adem\u00e1s la idea es que sea lo m\u00e1s parecido a un simulacro de la ICPC, donde los 3 integrantes comparten un mismo PC, como en este ejemplo ). [Nota COVID: en caso de pandemia, se acepta un screenshot de zoom, skype, etc.] Al terminar la competencia, deben mandar el link al scoreboard final de la competencia RPC en que participaron. El bonus se calcular\u00e1 como 5*(X/N) d\u00e9cimas, donde X = problemas resueltos por el grupo, N = problemas resueltos por el equipo que qued\u00f3 en primer lugar. Las 5*(X/N) d\u00e9cimas obtenidas se sumar\u00e1n a las d\u00e9cimas de bonus de cada integrante del equipo.","title":"3.2) BONUS RPC (grupal)"},{"location":"about/how_course_works/#33-bonus-contest-individual","text":"Existen muchos sitios online que organizan competencias individuales cada cierto tiempo. Los alumnos tienen la opci\u00f3n de participar en estas competencias y obtener d\u00e9cimas de bonus. Los sitios que m\u00e1s recomendamos son Codeforces , Atcoder y Codechef . Todos tienen calendarios: calendario codeforces , calendario atcoder , calendario codechef . Para obtener este bonus debes: Registrarte en Codeforces, Atcoder y/o Codechef. Participar en una competencia individual (generalmente duran alrededor de 2 horas). Al final de la competencia avisarnos en qu\u00e9 competencia participaste y mandar el link al ranking donde quedaste. El bonus se calcular\u00e1 como 3*(X/N) d\u00e9cimas, donde X = cantidad de problemas resueltos por ti, N = cantidad de problemas resueltos por la persona que qued\u00f3 en primer lugar. Las 3*(X/N) d\u00e9cimas obtenidas se sumar\u00e1n a tus d\u00e9cimas de bonus.","title":"3.3) BONUS Contest Individual:"},{"location":"about/how_course_works/#34-super-bonus-codeforces","text":"Codeforces tiene un sistema de rating parecido al ELO en Ajedrez. Cualquier alumn@ que participe en al menos 3 contests de Codeforces durante el semestre y luego de ello alcance un rating de 1700 o superior , autom\u00e1ticamente tendr\u00e1 nota final 7.0 en el curso .","title":"3.4) SUPER BONUS Codeforces:"},{"location":"about/introduction/","text":"Introducci\u00f3n Este es un curso pr\u00e1ctico que prepara a los estudiantes para resolver problemas algor\u00edtmicos de programaci\u00f3n competitiva , como los que aparecen en competencias como la ACM ICPC , Google CodeJam , Facebook Hacker Cup y similares a los que preguntan empresas como Amazon y Google en sus entrevistas de trabajo. Los estudiantes ejercitar\u00e1n sus conocimientos de estructuras de datos y algoritmos, su ingenio y sus habilidades de programaci\u00f3n mediante la resoluci\u00f3n semanal de problemas de programaci\u00f3n competitiva. Adem\u00e1s, los alumnos podr\u00e1n optar a un cupo para representar a la Universidad en la competencia regional de la ICPC celebrada en Noviembre de cada a\u00f1o, y eventualmente en la ICPC World Final, celebrada en Abril del a\u00f1o siguiente. Al tratarse de un curso pr\u00e1ctico, la mayor\u00eda de tu tiempo te la pasar\u00e1s programando. No obstante, las habilidades que adquirir\u00e1s ac\u00e1 van m\u00e1s all\u00e1 que simplemente ganar competencias: Repasar\u00e1s, expandir\u00e1s y profundizar\u00e1s tus conocimientos en estructuras de datos y algoritmos. Te volver\u00e1s un programador o programadora mucho m\u00e1s cuidados@ y precis@. Desarrollar\u00e1s el h\u00e1bito de considerar siempre los l\u00edmites de tiempo y memoria al escribir tus c\u00f3digos, as\u00ed como estar siempre preocupad@ de los casos bordes. Ejercitar\u00e1s tus habilidades de debugging, y m\u00e1s importante a\u00fan, aprender\u00e1s a identificar cu\u00e1ndo hay riesgo de bugs y c\u00f3mo escribir buenos c\u00f3digos que permitan prevenirlos. Ejercitar\u00e1s la habilidad de pensar creativamente antes de programar. Con el tiempo ver\u00e1s c\u00f3mo los problemas te obligar\u00e1n a pensar de forma ingeniosa y creativa para dise\u00f1ar soluciones eficientes y correctas, que cumplan con todas las restricciones. Todas estas habilidades son sumamente \u00fatiles no solo aqu\u00ed sino tambi\u00e9n en los dem\u00e1s cursos de la malla de Ciencia de Computaci\u00f3n, adem\u00e1s de ser ampliamente valoradas y buscadas por empresas de la industria de software (ej. Google, Facebook, Microsoft) y a la larga muy \u00fatiles en tu carrera profesional.","title":"Introducci\u00f3n"},{"location":"about/introduction/#introduccion","text":"Este es un curso pr\u00e1ctico que prepara a los estudiantes para resolver problemas algor\u00edtmicos de programaci\u00f3n competitiva , como los que aparecen en competencias como la ACM ICPC , Google CodeJam , Facebook Hacker Cup y similares a los que preguntan empresas como Amazon y Google en sus entrevistas de trabajo. Los estudiantes ejercitar\u00e1n sus conocimientos de estructuras de datos y algoritmos, su ingenio y sus habilidades de programaci\u00f3n mediante la resoluci\u00f3n semanal de problemas de programaci\u00f3n competitiva. Adem\u00e1s, los alumnos podr\u00e1n optar a un cupo para representar a la Universidad en la competencia regional de la ICPC celebrada en Noviembre de cada a\u00f1o, y eventualmente en la ICPC World Final, celebrada en Abril del a\u00f1o siguiente. Al tratarse de un curso pr\u00e1ctico, la mayor\u00eda de tu tiempo te la pasar\u00e1s programando. No obstante, las habilidades que adquirir\u00e1s ac\u00e1 van m\u00e1s all\u00e1 que simplemente ganar competencias: Repasar\u00e1s, expandir\u00e1s y profundizar\u00e1s tus conocimientos en estructuras de datos y algoritmos. Te volver\u00e1s un programador o programadora mucho m\u00e1s cuidados@ y precis@. Desarrollar\u00e1s el h\u00e1bito de considerar siempre los l\u00edmites de tiempo y memoria al escribir tus c\u00f3digos, as\u00ed como estar siempre preocupad@ de los casos bordes. Ejercitar\u00e1s tus habilidades de debugging, y m\u00e1s importante a\u00fan, aprender\u00e1s a identificar cu\u00e1ndo hay riesgo de bugs y c\u00f3mo escribir buenos c\u00f3digos que permitan prevenirlos. Ejercitar\u00e1s la habilidad de pensar creativamente antes de programar. Con el tiempo ver\u00e1s c\u00f3mo los problemas te obligar\u00e1n a pensar de forma ingeniosa y creativa para dise\u00f1ar soluciones eficientes y correctas, que cumplan con todas las restricciones. Todas estas habilidades son sumamente \u00fatiles no solo aqu\u00ed sino tambi\u00e9n en los dem\u00e1s cursos de la malla de Ciencia de Computaci\u00f3n, adem\u00e1s de ser ampliamente valoradas y buscadas por empresas de la industria de software (ej. Google, Facebook, Microsoft) y a la larga muy \u00fatiles en tu carrera profesional.","title":"Introducci\u00f3n"},{"location":"about/temario/","text":"Temario Introducci\u00f3n a la Programaci\u00f3n Competitiva (2 semanas) Introducci\u00f3n a C++ para programaci\u00f3n competitiva Estructuras de datos y librer\u00edas b\u00e1sicas de C++ Problemas f\u00e1ciles e introductorios de implementaci\u00f3n B\u00fasqueda Binaria y Ternaria (2 semanas) Fuerza Bruta y Backtracking (1 semana) Programaci\u00f3n Din\u00e1mica (2 semanas) Algoritmos Codiciosos (1 semanas) Dividir para Conquistar (1 semana) Introducci\u00f3n a Grafos (2 semanas) Conceptos b\u00e1sicos: grafos dirigidos, no dirigido, \u00e1rboles. C\u00f3mo representar grafos en c\u00f3digo. Recorriendo grafos: DFS y BFS. Camino m\u00e1s corto: Dijkstra, Bellman-Ford y Floyd-Warshall Topological Sort Matem\u00e1ticas y Teor\u00eda de N\u00fameros para Programaci\u00f3n Competitiva (resto del semestre) N\u00fameros primos Tests de primalidad Criba de Erat\u00f3stenes Factorizaci\u00f3n prima Aritm\u00e9tica modular Identidades Algoritmo extendido de euclides Inverso modular, ecuaciones diof\u00e1nticas y ecuaciones de congruencia modular Exponenciaci\u00f3n binaria Conteo y combinatoria Integraci\u00f3n num\u00e9rica Teorema del resto chino","title":"Temario"},{"location":"about/temario/#temario","text":"Introducci\u00f3n a la Programaci\u00f3n Competitiva (2 semanas) Introducci\u00f3n a C++ para programaci\u00f3n competitiva Estructuras de datos y librer\u00edas b\u00e1sicas de C++ Problemas f\u00e1ciles e introductorios de implementaci\u00f3n B\u00fasqueda Binaria y Ternaria (2 semanas) Fuerza Bruta y Backtracking (1 semana) Programaci\u00f3n Din\u00e1mica (2 semanas) Algoritmos Codiciosos (1 semanas) Dividir para Conquistar (1 semana) Introducci\u00f3n a Grafos (2 semanas) Conceptos b\u00e1sicos: grafos dirigidos, no dirigido, \u00e1rboles. C\u00f3mo representar grafos en c\u00f3digo. Recorriendo grafos: DFS y BFS. Camino m\u00e1s corto: Dijkstra, Bellman-Ford y Floyd-Warshall Topological Sort Matem\u00e1ticas y Teor\u00eda de N\u00fameros para Programaci\u00f3n Competitiva (resto del semestre) N\u00fameros primos Tests de primalidad Criba de Erat\u00f3stenes Factorizaci\u00f3n prima Aritm\u00e9tica modular Identidades Algoritmo extendido de euclides Inverso modular, ecuaciones diof\u00e1nticas y ecuaciones de congruencia modular Exponenciaci\u00f3n binaria Conteo y combinatoria Integraci\u00f3n num\u00e9rica Teorema del resto chino","title":"Temario"},{"location":"contests/","text":"Contests Contest 1 Marzo 10, 15 d\u00edas, link a contest T\u00f3picos : Problemas de implementaci\u00f3n (excelente oportunidad para aprender C++) Puntos : 1, 1, 2, 2, 2, 2, 2, 2, 3, 3 Puntaje M\u00ednimo Esperado : 4 Hints y c\u00f3digos de ejemplo : link","title":"Contests"},{"location":"contests/#contests","text":"","title":"Contests"},{"location":"contests/#contest-1","text":"Marzo 10, 15 d\u00edas, link a contest T\u00f3picos : Problemas de implementaci\u00f3n (excelente oportunidad para aprender C++) Puntos : 1, 1, 2, 2, 2, 2, 2, 2, 3, 3 Puntaje M\u00ednimo Esperado : 4 Hints y c\u00f3digos de ejemplo : link","title":"Contest 1"},{"location":"contests/hints/contest1/","text":"A - Stones on the Table Hint Basta recorrer el string y sumar uno a la respuesta cada vez que una letra sea igual a la anterior Soluci\u00f3n + c\u00f3digo Implementar el hint C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++ B - Sum of the Others Hint Piensen en cuanto debe ser la suma de todo (incluyendo el resultado) si el resultado es igual a la suma Soluci\u00f3n + c\u00f3digo Implementar el hint. Para recibir lineas hasta que se acaben en python pueden usar la libreria sys y un for line in sys.stdin. Por otro lado en C++ pueden usar while (getline(cin, line)) y para separar los n\u00fameros en cada linea pueden usar stringstreams (averiguar). C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++ C - Maximum Square Hint Piensen en c\u00f3mo ayudar\u00eda ordenar las tablas de menor a mayor (o viceversa). Soluci\u00f3n + c\u00f3digo Si est\u00e1n ordenadas de menor a mayor y se recorren en ese orden, la primera vez que las tablas que quedan sean menos o igual al valor actual, las tablas que queden ser\u00e1n la respuesta. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++ D - Temporarily unavailable Hint Podemos chequear si no hay intersecci\u00f3n y retornar 0 (basta ver si el comienzo de cobertura esta despu\u00e9s del final del recorrido o si el final del radio de cobertura est\u00e1 antes del inicio del recorrido), en otro caso basta sumar el tama\u00f1o del principio al comienzo del radio de cobertura y del final del radio de cobertura hasta el final del recorrido (si son positivos). Soluci\u00f3n + c\u00f3digo Implementar el hint. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++ E - H-Index Hint Se debe encontrar el mayor H tal que tenemos al menos H papers con al menos H citas. Para esto piensen c\u00f3mo facilita el c\u00e1lculo ordenar las citas de cada paper de mayor a menor. Ojo que no se puede resolver viendo todas las posibilidades de H y chequeando porque no pasa en el tiempo l\u00edmite. Soluci\u00f3n + c\u00f3digo Dado que lo tenemos ordenado de mayor a menor, para cada posici\u00f3n i en la lista de citas C (de 0 a N - 1) la respuesta ser\u00e1 el m\u00e1ximo de calcular min(C[i], i + 1). Esto pues min(C[i], i + 1) representa el mayor n\u00famero que cumple que hay al menos esa cantidad de papers con al menos esa cantidad de citas para cada posici\u00f3n. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++ F - Center Alignment Hint Basta implementar lo descrito en el enunciado. Cuidado con los casos especiales de alineamiento, si hay una cantidad impar de espacio, se da menos espacio a la izquierda primero, la pr\u00f3xima vez con espacios impares a la derecha y as\u00ed. Soluci\u00f3n + c\u00f3digo Implementar el hint. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++ G - Four Segments Hint Busque caracter\u00edsticas necesarias y suficientes para determinar que los segmentos entregados forman un rect\u00e1ngulo, por ejemplo, hay exactamente 4 puntos y 4 segmentos, 2 verticales y 2 horizontales. Soluci\u00f3n + c\u00f3digo Implementar el hint. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++ H - Touchscreen Keyboard Hint Podemos asignarles coordenadas de fila y columna a cada letra. Usando esto es f\u00e1cil obterner la soluci\u00f3n calculando distancias y ordenando. Pueden guardar las coordenadas en un diccionario de python o en un map de c++. Soluci\u00f3n + c\u00f3digo Implementar el hint. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++ I - Adding Words Hint Pueden usar diccionarios de Python o maps de c++ para asignar valores a las palabras y palabras a los valores. Usando esto piensen en c\u00f3mo implementar el resto. Soluci\u00f3n + c\u00f3digo Usando el hint, en caso de definici\u00f3n s\u00f3lo asignamos, en caso de clear limpiamos los diccionarios y en caso de c\u00e1lculo se va sumando el valor multiplicado por signo anterior hasta encontrar un igual. Ojo ir chequeando que existan las keys en los maps. Hay un caso borde al volver a asignar una palabra previamente asignada, en este caso deben borrar la asignaci\u00f3n del valor anterior a la palabra. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++ J - They Are Everywhere Hint Hay varias formas de hacerlo, una de las m\u00e1s simple consiste en mantener un rango en que est\u00e1n presentes todos los pokemons para cada posici\u00f3n final. Empezando de la primera posici\u00f3n en que est\u00e9n todos los pokemons hacia la izquierda, si avanzamos el borde derecho en una posici\u00f3n podemos mover el izquierdo mientras la ocurrencia del pokemon en el borde izquierdo dentro del rango sea mayor a 1. La respuesta final ser\u00e1 el m\u00ednimo de estos rangos. Est\u00e1 t\u00e9cnica es una aplicaci\u00f3n de dos punteros y es un enfoque bastante usado en programaci\u00f3n competitiva. Soluci\u00f3n + c\u00f3digo Implementar el hint. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++","title":"Contest 1"},{"location":"contests/hints/contest1/#a-stones-on-the-table","text":"Hint Basta recorrer el string y sumar uno a la respuesta cada vez que una letra sea igual a la anterior Soluci\u00f3n + c\u00f3digo Implementar el hint C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++","title":"A - Stones on the Table"},{"location":"contests/hints/contest1/#b-sum-of-the-others","text":"Hint Piensen en cuanto debe ser la suma de todo (incluyendo el resultado) si el resultado es igual a la suma Soluci\u00f3n + c\u00f3digo Implementar el hint. Para recibir lineas hasta que se acaben en python pueden usar la libreria sys y un for line in sys.stdin. Por otro lado en C++ pueden usar while (getline(cin, line)) y para separar los n\u00fameros en cada linea pueden usar stringstreams (averiguar). C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++","title":"B - Sum of the Others"},{"location":"contests/hints/contest1/#c-maximum-square","text":"Hint Piensen en c\u00f3mo ayudar\u00eda ordenar las tablas de menor a mayor (o viceversa). Soluci\u00f3n + c\u00f3digo Si est\u00e1n ordenadas de menor a mayor y se recorren en ese orden, la primera vez que las tablas que quedan sean menos o igual al valor actual, las tablas que queden ser\u00e1n la respuesta. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++","title":"C - Maximum Square"},{"location":"contests/hints/contest1/#d-temporarily-unavailable","text":"Hint Podemos chequear si no hay intersecci\u00f3n y retornar 0 (basta ver si el comienzo de cobertura esta despu\u00e9s del final del recorrido o si el final del radio de cobertura est\u00e1 antes del inicio del recorrido), en otro caso basta sumar el tama\u00f1o del principio al comienzo del radio de cobertura y del final del radio de cobertura hasta el final del recorrido (si son positivos). Soluci\u00f3n + c\u00f3digo Implementar el hint. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++","title":"D - Temporarily unavailable"},{"location":"contests/hints/contest1/#e-h-index","text":"Hint Se debe encontrar el mayor H tal que tenemos al menos H papers con al menos H citas. Para esto piensen c\u00f3mo facilita el c\u00e1lculo ordenar las citas de cada paper de mayor a menor. Ojo que no se puede resolver viendo todas las posibilidades de H y chequeando porque no pasa en el tiempo l\u00edmite. Soluci\u00f3n + c\u00f3digo Dado que lo tenemos ordenado de mayor a menor, para cada posici\u00f3n i en la lista de citas C (de 0 a N - 1) la respuesta ser\u00e1 el m\u00e1ximo de calcular min(C[i], i + 1). Esto pues min(C[i], i + 1) representa el mayor n\u00famero que cumple que hay al menos esa cantidad de papers con al menos esa cantidad de citas para cada posici\u00f3n. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++","title":"E - H-Index"},{"location":"contests/hints/contest1/#f-center-alignment","text":"Hint Basta implementar lo descrito en el enunciado. Cuidado con los casos especiales de alineamiento, si hay una cantidad impar de espacio, se da menos espacio a la izquierda primero, la pr\u00f3xima vez con espacios impares a la derecha y as\u00ed. Soluci\u00f3n + c\u00f3digo Implementar el hint. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++","title":"F - Center Alignment"},{"location":"contests/hints/contest1/#g-four-segments","text":"Hint Busque caracter\u00edsticas necesarias y suficientes para determinar que los segmentos entregados forman un rect\u00e1ngulo, por ejemplo, hay exactamente 4 puntos y 4 segmentos, 2 verticales y 2 horizontales. Soluci\u00f3n + c\u00f3digo Implementar el hint. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++","title":"G - Four Segments"},{"location":"contests/hints/contest1/#h-touchscreen-keyboard","text":"Hint Podemos asignarles coordenadas de fila y columna a cada letra. Usando esto es f\u00e1cil obterner la soluci\u00f3n calculando distancias y ordenando. Pueden guardar las coordenadas en un diccionario de python o en un map de c++. Soluci\u00f3n + c\u00f3digo Implementar el hint. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++","title":"H - Touchscreen Keyboard"},{"location":"contests/hints/contest1/#i-adding-words","text":"Hint Pueden usar diccionarios de Python o maps de c++ para asignar valores a las palabras y palabras a los valores. Usando esto piensen en c\u00f3mo implementar el resto. Soluci\u00f3n + c\u00f3digo Usando el hint, en caso de definici\u00f3n s\u00f3lo asignamos, en caso de clear limpiamos los diccionarios y en caso de c\u00e1lculo se va sumando el valor multiplicado por signo anterior hasta encontrar un igual. Ojo ir chequeando que existan las keys en los maps. Hay un caso borde al volver a asignar una palabra previamente asignada, en este caso deben borrar la asignaci\u00f3n del valor anterior a la palabra. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++","title":"I - Adding Words"},{"location":"contests/hints/contest1/#j-they-are-everywhere","text":"Hint Hay varias formas de hacerlo, una de las m\u00e1s simple consiste en mantener un rango en que est\u00e1n presentes todos los pokemons para cada posici\u00f3n final. Empezando de la primera posici\u00f3n en que est\u00e9n todos los pokemons hacia la izquierda, si avanzamos el borde derecho en una posici\u00f3n podemos mover el izquierdo mientras la ocurrencia del pokemon en el borde izquierdo dentro del rango sea mayor a 1. La respuesta final ser\u00e1 el m\u00ednimo de estos rangos. Est\u00e1 t\u00e9cnica es una aplicaci\u00f3n de dos punteros y es un enfoque bastante usado en programaci\u00f3n competitiva. Soluci\u00f3n + c\u00f3digo Implementar el hint. C\u00f3digo de ejemplo Python C\u00f3digo de ejemplo C++","title":"J - They Are Everywhere"},{"location":"resources/","text":"Para aprender C++ (\\<\\<\\<\\<\\<\\< OJO, NOVAT@S) Recursos para temas espec\u00edficos Backtracking Binary & Ternary Search Data Structures Dynamic Programming (DP) Greedy Divide and Conquer Graphs Strings Mathematics Geometry Square Root Decomposition Recursos generales Canales de Youtube con muchas explicaciones: Gaurav Sen WillianFiset Abdul Bari Algorithms Live! Tushar Roy - Coding Made Simple Agust\u00edn Santiago Guti\u00e9rrez [elsantodel90] Programaci\u00f3n Competitiva CL Repositorios con muchos c\u00f3digos de ejemplo (implementaciones de algoritmos y estructuras de datos t\u00edpicos): Apuntes USACO \\<\\<\\<\\<\\<\\<\\< BRUTAL, ESTOS APUNTES SON DEMASIADO BUENOS Apuntes Benjamin Rubio (ex seleccionado PUC) ICPC Team Notebook. Team \"UNC - Gracias Demetrio\" \\<\\<\\<\\<\\<\\<\\< MUY BUENOS TAMBI\u00c9N Apuntes ICPC Universidad de Chile (C++) https://github.com/kth-competitive-programming/kactl Apuntes ICPC de Robinson Castro et al (C++) Apuntes ICPC de Ignacio Hermosilla (C++) C++ Cheat Sheet for ACM ICPC Stanford University ICPC Team Notebook Repo de Apuntes del team Caloventor en Dos (C++) Repo de Apuntes de Pablo Messina (C++) Otras p\u00e1ginas con links a muchos recursos y material de estudio: CP-ALGORITHMS \\<\\<\\<\\<\\<\\< EXCELENTE P\u00c1GINA, MEGA RECOMENDADA Codeforces: An awesome list for competitive programming! All of the good tutorials found on codeforces Standford CS 97SI: Introduction to Programming Contests GeeksForGeeks: HOW TO PREPARE FOR ACM ICPC GeeksForGeeks: Top 10 Algorithms and Data Structures for Competitive Programming Sitio web del Taller de la U. de Chile Techie Delight: Coding made easy Material Campamento 2015 progcomp.cl Material Campamento 2016 progcomp.cl Material Campamento 2017 progcomp.cl Material Campamento 2018 progcomp.cl Libros con harto material de programaci\u00f3n competitiva: Competitive Programmer's Handbook Competitive Programming 2 Competitive Programming 3 (CP3) Soluciones de Regionales Latinoamericanas Blogs con explicaciones: Blog CaloventorEnDos Chocoblog Codeforces - ACM ICPC 2011 Latin America Finals Codeforces - ACM ICPC 2012 Latin America Finals Codeforces - ACM ICPC 2014 Latin America Finals Codeforces - ACM ICPC 2015 Latin America Finals Codeforces - ACM ICPC 2016 Latin America Finals Codeforces - ACM ICPC 2017 Latin America Finals Codeforces - ACM ICPC 2018 Latin America Finals Codeforces - ACM ICPC 2019 Latin America Finals Codeforces - ACM ICPC 2020 Latin America Finals Explicaciones de problemas 2020: Discuss\u00e3o dos problemas da Final Google Sheet con soluciones de las \u00faltimas regionales (WIP) Soluciones, Inputs y Outputs oficiales de Regionales Latinoam\u00e9rica: http://maratona.ime.usp.br/ Norteam\u00e9rica: http://acmgnyr.org http://cs.ecs.baylor.edu/~hamerly/icpc/ http://www.acmicpc-pacnw.org/results.htm http://icpc-ecna.ysu.edu/PastResults/","title":"Recursos"},{"location":"resources/#para-aprender-c-ojo-novats","text":"","title":"Para aprender C++ (\\&lt;\\&lt;\\&lt;\\&lt;\\&lt;\\&lt; OJO, NOVAT@S)"},{"location":"resources/#recursos-para-temas-especificos","text":"Backtracking Binary & Ternary Search Data Structures Dynamic Programming (DP) Greedy Divide and Conquer Graphs Strings Mathematics Geometry Square Root Decomposition","title":"Recursos para temas espec\u00edficos"},{"location":"resources/#recursos-generales","text":"Canales de Youtube con muchas explicaciones: Gaurav Sen WillianFiset Abdul Bari Algorithms Live! Tushar Roy - Coding Made Simple Agust\u00edn Santiago Guti\u00e9rrez [elsantodel90] Programaci\u00f3n Competitiva CL Repositorios con muchos c\u00f3digos de ejemplo (implementaciones de algoritmos y estructuras de datos t\u00edpicos): Apuntes USACO \\<\\<\\<\\<\\<\\<\\< BRUTAL, ESTOS APUNTES SON DEMASIADO BUENOS Apuntes Benjamin Rubio (ex seleccionado PUC) ICPC Team Notebook. Team \"UNC - Gracias Demetrio\" \\<\\<\\<\\<\\<\\<\\< MUY BUENOS TAMBI\u00c9N Apuntes ICPC Universidad de Chile (C++) https://github.com/kth-competitive-programming/kactl Apuntes ICPC de Robinson Castro et al (C++) Apuntes ICPC de Ignacio Hermosilla (C++) C++ Cheat Sheet for ACM ICPC Stanford University ICPC Team Notebook Repo de Apuntes del team Caloventor en Dos (C++) Repo de Apuntes de Pablo Messina (C++) Otras p\u00e1ginas con links a muchos recursos y material de estudio: CP-ALGORITHMS \\<\\<\\<\\<\\<\\< EXCELENTE P\u00c1GINA, MEGA RECOMENDADA Codeforces: An awesome list for competitive programming! All of the good tutorials found on codeforces Standford CS 97SI: Introduction to Programming Contests GeeksForGeeks: HOW TO PREPARE FOR ACM ICPC GeeksForGeeks: Top 10 Algorithms and Data Structures for Competitive Programming Sitio web del Taller de la U. de Chile Techie Delight: Coding made easy Material Campamento 2015 progcomp.cl Material Campamento 2016 progcomp.cl Material Campamento 2017 progcomp.cl Material Campamento 2018 progcomp.cl Libros con harto material de programaci\u00f3n competitiva: Competitive Programmer's Handbook Competitive Programming 2 Competitive Programming 3 (CP3)","title":"Recursos generales"},{"location":"resources/#soluciones-de-regionales-latinoamericanas","text":"Blogs con explicaciones: Blog CaloventorEnDos Chocoblog Codeforces - ACM ICPC 2011 Latin America Finals Codeforces - ACM ICPC 2012 Latin America Finals Codeforces - ACM ICPC 2014 Latin America Finals Codeforces - ACM ICPC 2015 Latin America Finals Codeforces - ACM ICPC 2016 Latin America Finals Codeforces - ACM ICPC 2017 Latin America Finals Codeforces - ACM ICPC 2018 Latin America Finals Codeforces - ACM ICPC 2019 Latin America Finals Codeforces - ACM ICPC 2020 Latin America Finals Explicaciones de problemas 2020: Discuss\u00e3o dos problemas da Final Google Sheet con soluciones de las \u00faltimas regionales (WIP)","title":"Soluciones de Regionales Latinoamericanas"},{"location":"resources/#soluciones-inputs-y-outputs-oficiales-de-regionales","text":"Latinoam\u00e9rica: http://maratona.ime.usp.br/ Norteam\u00e9rica: http://acmgnyr.org http://cs.ecs.baylor.edu/~hamerly/icpc/ http://www.acmicpc-pacnw.org/results.htm http://icpc-ecna.ysu.edu/PastResults/","title":"Soluciones, Inputs y Outputs oficiales de Regionales"},{"location":"resources/backtracking/","text":"Backtracking https://progcomp.cl/backtracking 6 Introduction to Backtracking - Brute Force Approach: https://www.youtube.com/watch?v=DKCbsiDBN6c 6.1 N Queens Problem using Backtracking: https://www.youtube.com/watch?v=xFv_Hl4B83A 6.2 Sum Of Subsets Problem - Backtracking: https://www.youtube.com/watch?v=kyLxTdsT8ws 6.3 Graph Coloring Problem - Backtracking: https://www.youtube.com/watch?v=052VkKhIaQ4 Algor\u00edtmia - Tema 5. Backtracking. N-Reinas - Andr\u00e9s Mu\u00f1oz Ortega: https://www.youtube.com/watch?v=XQYGwKiqV3Y","title":"Backtracking"},{"location":"resources/backtracking/#backtracking","text":"https://progcomp.cl/backtracking 6 Introduction to Backtracking - Brute Force Approach: https://www.youtube.com/watch?v=DKCbsiDBN6c 6.1 N Queens Problem using Backtracking: https://www.youtube.com/watch?v=xFv_Hl4B83A 6.2 Sum Of Subsets Problem - Backtracking: https://www.youtube.com/watch?v=kyLxTdsT8ws 6.3 Graph Coloring Problem - Backtracking: https://www.youtube.com/watch?v=052VkKhIaQ4 Algor\u00edtmia - Tema 5. Backtracking. N-Reinas - Andr\u00e9s Mu\u00f1oz Ortega: https://www.youtube.com/watch?v=XQYGwKiqV3Y","title":"Backtracking"},{"location":"resources/data_structures/","text":"Estructuras de Datos C++ STL Data Structures (para llegar y usar): Utils : pairs & tuples: video , doc pairs , doc tuples , geeksforgeeks , c\u00f3digo iterators: video , docu , geeksforgeeks 1 , geeksforgeeks 2 , c\u00f3digo Sequence Containers : youtube: Introduction of STL #2: Sequence Containers (el video cubre vector, deque, list, forward list, array) youtube: C++ STL Part - 7 : The Container Adapters - Stack, Queue & Priority Queue (el video cubre stack, queue y priority_queue) arrays: documentaci\u00f3n , c\u00f3digo vector: documentaci\u00f3n , geeksforgeeks , c\u00f3digo deque: documentaci\u00f3n , geeksforgeeks , c\u00f3digo queue: documentaci\u00f3n , geeksforgeeks , c\u00f3digo stack: documentaci\u00f3n , geeksforgeeks , c\u00f3digo priority_queue (minheap / maxheap): documentaci\u00f3n , geeksforgeeks , c\u00f3digo list (lista doblemente ligada): documentaci\u00f3n , geeksforgeeks , c\u00f3digo Associative Containers : youtube: Introduction of STL #3: Associative Containers (el video cubre set, multiset, map, multimap) Set: documentaci\u00f3n , geeksforgeeks , c\u00f3digo Multiset: documentaci\u00f3n , geeksforgeeks , c\u00f3digo Map: documentaci\u00f3n , geeksforgeeks , c\u00f3digo Multimap: documentaci\u00f3n , geeksforgeeks , c\u00f3digo Unordered Containers : Introduction of STL #4: Unordered Containers (el video cubre unordered set/multiset/map/multimap) unordered_set: documentaci\u00f3n , geeksforgeeks , c\u00f3digo unordered_multiset: documentaci\u00f3n , geeksforgeeks , c\u00f3digo unordered_map: documentaci\u00f3n , geeksforgeeks , c\u00f3digo unordered_multimap: documentaci\u00f3n , geeksforgeeks , c\u00f3digo Policy based data structures : codeforces: C++ STL: Policy based data structures geeksforgeeks: Policy based data structures in g++ orderered_set: geeksforgeeks , c\u00f3digo Sparse Table: (youtube) Sparse Table Algorithm Range Minimum Query (youtube) Sparse Table Tutorial / RMQ cp-algorithms: sparse table C\u00f3digo de ejemplo Segment Tree: cp-algorithms: segment tree http://progcomp.cl/segmenttree (youtube) Segment Tree Range Minimum Query (youtube) Segment Tree [ICPCCL 2016] (codeforces) Efficient and easy segment trees (c\u00f3mo hacer segment trees iterativos ) C\u00f3digos de ejemplo Segment Tree Lazy: cp-algorithms: segment tree lazy youtube: Lazy Propagation Segment Tree youtube: Segment Tree - Range Queries with Lazy Updates C\u00f3digo de ejemplo Fenwick Tree (a.k.a. BIT o Binary Indexed Tree): (youtube) Tutorial: Binary Indexed Tree (Fenwick Tree) (youtube) Fenwick Tree explicado por Jorge P\u00e9rez https://youtu.be/0PzR0IoqkkU?t=1453 (por si quieren ver la explicaci\u00f3n de sweep line tambi\u00e9n que viene justo antes) (youtube) youtube: Fenwick Tree or Binary Indexed Tree cp-algorithms: fenwick tree HackerEarth - binary indexed tree made easy http://progcomp.cl/fenwicktree cs.stackexchange: BIT: What is the intuition behind a binary indexed tree and how was it thought about? Topcoder: binary indexed trees Fenwick Tree 2D: geeksforgeeks - Two Dimensional Binary Indexed Tree or Fenwick Tree youtube: explicaci\u00f3n de Jorge P\u00e9rez Topcoder: BIT 2D C\u00f3digos de ejemplo: Fenwick tree 1D Fenwick tree 2D Union Find (a.k.a. DSU o Disjoint Set Union): cp-algorithms: Disjoint Set Union (youtube) 1.12 Disjoint Sets Data Structure - Weighted Union and Collapsing Find (youtube) Disjoint Sets using union by rank and path compression Graph Algorithm (youtube) Union Find Path Compression geeksforgeeks: Disjoint Set (Or Union-Find) | Set 1 (Detect Cycle in an Undirected Graph) geeksforgeeks: Union-Find Algorithm | Set 2 (Union By Rank and Path Compression) C\u00f3digo de ejemplo Treap: https://cp-algorithms.com/data_structures/treap.html Wavelet Tree: https://www.dcc.uchile.cl/~jperez/papers/ioiconf16.pdf C\u00f3digo de ejemplo","title":"Data Structures"},{"location":"resources/data_structures/#estructuras-de-datos","text":"","title":"Estructuras de Datos"},{"location":"resources/data_structures/#c-stl-data-structures-para-llegar-y-usar","text":"Utils : pairs & tuples: video , doc pairs , doc tuples , geeksforgeeks , c\u00f3digo iterators: video , docu , geeksforgeeks 1 , geeksforgeeks 2 , c\u00f3digo Sequence Containers : youtube: Introduction of STL #2: Sequence Containers (el video cubre vector, deque, list, forward list, array) youtube: C++ STL Part - 7 : The Container Adapters - Stack, Queue & Priority Queue (el video cubre stack, queue y priority_queue) arrays: documentaci\u00f3n , c\u00f3digo vector: documentaci\u00f3n , geeksforgeeks , c\u00f3digo deque: documentaci\u00f3n , geeksforgeeks , c\u00f3digo queue: documentaci\u00f3n , geeksforgeeks , c\u00f3digo stack: documentaci\u00f3n , geeksforgeeks , c\u00f3digo priority_queue (minheap / maxheap): documentaci\u00f3n , geeksforgeeks , c\u00f3digo list (lista doblemente ligada): documentaci\u00f3n , geeksforgeeks , c\u00f3digo Associative Containers : youtube: Introduction of STL #3: Associative Containers (el video cubre set, multiset, map, multimap) Set: documentaci\u00f3n , geeksforgeeks , c\u00f3digo Multiset: documentaci\u00f3n , geeksforgeeks , c\u00f3digo Map: documentaci\u00f3n , geeksforgeeks , c\u00f3digo Multimap: documentaci\u00f3n , geeksforgeeks , c\u00f3digo Unordered Containers : Introduction of STL #4: Unordered Containers (el video cubre unordered set/multiset/map/multimap) unordered_set: documentaci\u00f3n , geeksforgeeks , c\u00f3digo unordered_multiset: documentaci\u00f3n , geeksforgeeks , c\u00f3digo unordered_map: documentaci\u00f3n , geeksforgeeks , c\u00f3digo unordered_multimap: documentaci\u00f3n , geeksforgeeks , c\u00f3digo Policy based data structures : codeforces: C++ STL: Policy based data structures geeksforgeeks: Policy based data structures in g++ orderered_set: geeksforgeeks , c\u00f3digo","title":"C++ STL Data Structures (para llegar y usar):"},{"location":"resources/data_structures/#sparse-table","text":"(youtube) Sparse Table Algorithm Range Minimum Query (youtube) Sparse Table Tutorial / RMQ cp-algorithms: sparse table C\u00f3digo de ejemplo","title":"Sparse Table:"},{"location":"resources/data_structures/#segment-tree","text":"cp-algorithms: segment tree http://progcomp.cl/segmenttree (youtube) Segment Tree Range Minimum Query (youtube) Segment Tree [ICPCCL 2016] (codeforces) Efficient and easy segment trees (c\u00f3mo hacer segment trees iterativos ) C\u00f3digos de ejemplo","title":"Segment Tree:"},{"location":"resources/data_structures/#segment-tree-lazy","text":"cp-algorithms: segment tree lazy youtube: Lazy Propagation Segment Tree youtube: Segment Tree - Range Queries with Lazy Updates C\u00f3digo de ejemplo","title":"Segment Tree Lazy:"},{"location":"resources/data_structures/#fenwick-tree-aka-bit-o-binary-indexed-tree","text":"(youtube) Tutorial: Binary Indexed Tree (Fenwick Tree) (youtube) Fenwick Tree explicado por Jorge P\u00e9rez https://youtu.be/0PzR0IoqkkU?t=1453 (por si quieren ver la explicaci\u00f3n de sweep line tambi\u00e9n que viene justo antes) (youtube) youtube: Fenwick Tree or Binary Indexed Tree cp-algorithms: fenwick tree HackerEarth - binary indexed tree made easy http://progcomp.cl/fenwicktree cs.stackexchange: BIT: What is the intuition behind a binary indexed tree and how was it thought about? Topcoder: binary indexed trees Fenwick Tree 2D: geeksforgeeks - Two Dimensional Binary Indexed Tree or Fenwick Tree youtube: explicaci\u00f3n de Jorge P\u00e9rez Topcoder: BIT 2D C\u00f3digos de ejemplo: Fenwick tree 1D Fenwick tree 2D","title":"Fenwick Tree (a.k.a. BIT o Binary Indexed Tree):"},{"location":"resources/data_structures/#union-find-aka-dsu-o-disjoint-set-union","text":"cp-algorithms: Disjoint Set Union (youtube) 1.12 Disjoint Sets Data Structure - Weighted Union and Collapsing Find (youtube) Disjoint Sets using union by rank and path compression Graph Algorithm (youtube) Union Find Path Compression geeksforgeeks: Disjoint Set (Or Union-Find) | Set 1 (Detect Cycle in an Undirected Graph) geeksforgeeks: Union-Find Algorithm | Set 2 (Union By Rank and Path Compression) C\u00f3digo de ejemplo","title":"Union Find (a.k.a. DSU o Disjoint Set Union):"},{"location":"resources/data_structures/#treap","text":"https://cp-algorithms.com/data_structures/treap.html","title":"Treap:"},{"location":"resources/data_structures/#wavelet-tree","text":"https://www.dcc.uchile.cl/~jperez/papers/ioiconf16.pdf C\u00f3digo de ejemplo","title":"Wavelet Tree:"},{"location":"resources/divconq/","text":"Divide and Conquer (Youtube) 2 Divide And Conquer (Youtube) Divide and Conquer Generic Method https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm Ejemplos de aplicaciones: (Youtube) Merge sort in 3 minutes (Youtube) 2.7.2. Merge Sort Algorithm (Youtube) 2.8.1 QuickSort Algorithm (Youtube) Closest pair of points (Youtube) Finding the Closest Pair of Points on the Plane: Divide and Conquer","title":"Divide and Conquer"},{"location":"resources/divconq/#divide-and-conquer","text":"(Youtube) 2 Divide And Conquer (Youtube) Divide and Conquer Generic Method https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm Ejemplos de aplicaciones: (Youtube) Merge sort in 3 minutes (Youtube) 2.7.2. Merge Sort Algorithm (Youtube) 2.8.1 QuickSort Algorithm (Youtube) Closest pair of points (Youtube) Finding the Closest Pair of Points on the Plane: Divide and Conquer","title":"Divide and Conquer"},{"location":"resources/dp/","text":"Programaci\u00f3n Din\u00e1mica (DP) \u00bfQu\u00e9 es DP? What Is Dynamic Programming and How To Use It \\<\\<\\<\\<\\< MUY BUEN VIDEO, V\u00c9ANLO! Principle of Optimality - Dynamic Programming introduction Algorithms: Memoization and Dynamic Programming 19. Dynamic Programming I: Fibonacci, Shortest Paths Dos formas generales de usar DP: Bottom-Up vs Top-Down: http://stackoverflow.com/questions/6164629/dynamic-programming-and-memoization-bottom-up-vs-top-down-approaches Ejemplos de aplicaciones de DP: Coin Change: video Matrix Chain Multiplication: video1 , video2 Longest Increasing Subsequence (LIS): video , explicaci\u00f3n stackoverflow , c\u00f3digo ejemplo Knapsack problem: video Traveling Salesman Problem (TSP): video , implementaci\u00f3n usando bitmasks , c\u00f3digo ejemplo Minimum Edit Distance Between 2 Strings - The Levenshtein Distance: video1 , video2 Otros ejemplos: playlist DP Avanzado: Clase Optimizaciones de DP: https://youtu.be/wLSfdicxVLs Lista de Optimizaciones de DP: https://codeforces.com/blog/entry/8219 Problemas para practicar Optimizaciones de DP: https://codeforces.com/blog/entry/47932 Divide & Conquer Optimization: https://jeffreyxiao.me/blog/divide-and-conquer-optimization (cp-algorithms) Divide and Conquer DP HackerRank: editorial explicando la t\u00e9cnica (youtube) Dynamic Programming Optimization: Divide and Conquer technique c\u00f3digo de ejemplo Convex Hull Trick: Codeforces: [Tutorial] Convex Hull Trick \u2014 Geometry being useful https://jeffreyxiao.me/blog/convex-hull-trick Knuth's Optimization: https://jeffreyxiao.me/blog/knuths-optimization","title":"Dynamic Programming"},{"location":"resources/dp/#programacion-dinamica-dp","text":"","title":"Programaci\u00f3n Din\u00e1mica (DP)"},{"location":"resources/dp/#que-es-dp","text":"What Is Dynamic Programming and How To Use It \\<\\<\\<\\<\\< MUY BUEN VIDEO, V\u00c9ANLO! Principle of Optimality - Dynamic Programming introduction Algorithms: Memoization and Dynamic Programming 19. Dynamic Programming I: Fibonacci, Shortest Paths Dos formas generales de usar DP: Bottom-Up vs Top-Down: http://stackoverflow.com/questions/6164629/dynamic-programming-and-memoization-bottom-up-vs-top-down-approaches","title":"\u00bfQu\u00e9 es DP?"},{"location":"resources/dp/#ejemplos-de-aplicaciones-de-dp","text":"Coin Change: video Matrix Chain Multiplication: video1 , video2 Longest Increasing Subsequence (LIS): video , explicaci\u00f3n stackoverflow , c\u00f3digo ejemplo Knapsack problem: video Traveling Salesman Problem (TSP): video , implementaci\u00f3n usando bitmasks , c\u00f3digo ejemplo Minimum Edit Distance Between 2 Strings - The Levenshtein Distance: video1 , video2 Otros ejemplos: playlist","title":"Ejemplos de aplicaciones de DP:"},{"location":"resources/dp/#dp-avanzado","text":"Clase Optimizaciones de DP: https://youtu.be/wLSfdicxVLs Lista de Optimizaciones de DP: https://codeforces.com/blog/entry/8219 Problemas para practicar Optimizaciones de DP: https://codeforces.com/blog/entry/47932 Divide & Conquer Optimization: https://jeffreyxiao.me/blog/divide-and-conquer-optimization (cp-algorithms) Divide and Conquer DP HackerRank: editorial explicando la t\u00e9cnica (youtube) Dynamic Programming Optimization: Divide and Conquer technique c\u00f3digo de ejemplo Convex Hull Trick: Codeforces: [Tutorial] Convex Hull Trick \u2014 Geometry being useful https://jeffreyxiao.me/blog/convex-hull-trick Knuth's Optimization: https://jeffreyxiao.me/blog/knuths-optimization","title":"DP Avanzado:"},{"location":"resources/geometry/","text":"Geometr\u00eda Apuntes gen\u00e9ricos de geometr\u00eda: https://vlecomte.github.io/cp-geo.pdf (buen\u00edsimo y muy completo) Producto Punto y Producto Cruz youtube: Cross Product and Dot Product: Visual explanation Producto Cruz: Math is fun: Vector Cross Product youtube: Cross products - Essence of linear algebra, Chapter 10 stackoverlfow: Calculating a 2D Vector's Cross Product codeforces: Geometry: 2D points and lines [Tutorial] (saltarse a la parte cross product) Producto Punto: codeforces: Geometry: 2D points and lines [Tutorial] (saltarse a la parte dot product) youtube: Dot Product & Angle Between Vectors Apuntes varios de Geometr\u00eda 2D apuntes de Benja apuntes de Pablo Video Repaso de Geometr\u00eda (muy bueno): youtube: Geometr\u00eda Computacional [ICPCCL 2016] https://cp-algorithms.com (ir a la secci\u00f3n \"Geometry\") Apuntes varios de Geometr\u00eda 3D apuntes de Benja apuntes de Pablo Trigonometr\u00eda: implementaciones varias de trigonometr\u00eda Algoritmos varios de Pol\u00edgonos: implementaciones varias de algoritmos sobre pol\u00edgonos Detectar si un punto est\u00e1 dentro de un pol\u00edgono: geomalgorithms: Inclusion of a Point in a Polygon wikipedia: Point in polygon Puntos extremos en un pol\u00edgono convexo: geomalgorithms: Extreme Points of Convex Polygons Pick's Theorem: https://cp-algorithms.com/geometry/picks-theorem.html https://cp-algorithms.com/geometry/lattice-points.html Convex Hull: Buen video explicando Convex Hull: youtube: 5 6 Convex Hull 1350 Monotone Chain Algorithm (algoritmo recomendado): https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain C\u00f3digo de ejemplo Convex Hull Trick: https://wcipeg.com/wiki/Convex_hull_trick https://stackoverflow.com/questions/17834699/what-is-convex-hull-trick-exactly C\u00e1lculo de \u00c1reas: Teorema de Green (aplicado al caso particular de calcular \u00e1reas): lecturas: https://math.stackexchange.com/questions/199003/proving-greens-theorem-for-computing-area https://mathinsight.org/greens_theorem_find_area videos: youtube: Green's Theorem youtube: 78 - Finding area with Green's theorem How to Use Green's Theorem to Find the Area of A Region Green's Theorem: area under an arch - MIT 18.02SC Multivariable Calculus, Fall 2010 C\u00f3digos de ejemplo Aplicaci\u00f3n a pol\u00edgonos - \u00e1rea de un pol\u00edgono simple: http://math.blogoverflow.com/2014/06/04/greens-theorem-and-area-of-polygons/ http://stackoverflow.com/questions/451426/how-do-i-calculate-the-area-of-a-2d-polygon c\u00f3digo de ejemplo (ctrl+f \"area\") Sweep Line y Radial Sweep Line: codeforces: How to sweep like a Sir wikipedia: Sweep line algorithm topcoder: line sweep algorithms Dualidad L\u00ednea - Punto: Buenas slides explicando dualidad: https://algo.kaust.edu.sa/Documents/cs372l13.pdf Excelente pdf con demostraciones: https://pdfs.semanticscholar.org/810c/e0c19283481567c6545bf8c0cc8a4dcb8a1f.pdf Aplicaci\u00f3n interactiva: http://students.cec.wustl.edu/~tdeck/duality/","title":"Geometry"},{"location":"resources/geometry/#geometria","text":"","title":"Geometr\u00eda"},{"location":"resources/geometry/#apuntes-genericos-de-geometria","text":"https://vlecomte.github.io/cp-geo.pdf (buen\u00edsimo y muy completo)","title":"Apuntes gen\u00e9ricos de geometr\u00eda:"},{"location":"resources/geometry/#producto-punto-y-producto-cruz","text":"youtube: Cross Product and Dot Product: Visual explanation Producto Cruz: Math is fun: Vector Cross Product youtube: Cross products - Essence of linear algebra, Chapter 10 stackoverlfow: Calculating a 2D Vector's Cross Product codeforces: Geometry: 2D points and lines [Tutorial] (saltarse a la parte cross product) Producto Punto: codeforces: Geometry: 2D points and lines [Tutorial] (saltarse a la parte dot product) youtube: Dot Product & Angle Between Vectors","title":"Producto Punto y Producto Cruz"},{"location":"resources/geometry/#apuntes-varios-de-geometria-2d","text":"apuntes de Benja apuntes de Pablo Video Repaso de Geometr\u00eda (muy bueno): youtube: Geometr\u00eda Computacional [ICPCCL 2016] https://cp-algorithms.com (ir a la secci\u00f3n \"Geometry\")","title":"Apuntes varios de Geometr\u00eda 2D"},{"location":"resources/geometry/#apuntes-varios-de-geometria-3d","text":"apuntes de Benja apuntes de Pablo","title":"Apuntes varios de Geometr\u00eda 3D"},{"location":"resources/geometry/#trigonometria","text":"implementaciones varias de trigonometr\u00eda","title":"Trigonometr\u00eda:"},{"location":"resources/geometry/#algoritmos-varios-de-poligonos","text":"implementaciones varias de algoritmos sobre pol\u00edgonos Detectar si un punto est\u00e1 dentro de un pol\u00edgono: geomalgorithms: Inclusion of a Point in a Polygon wikipedia: Point in polygon Puntos extremos en un pol\u00edgono convexo: geomalgorithms: Extreme Points of Convex Polygons Pick's Theorem: https://cp-algorithms.com/geometry/picks-theorem.html https://cp-algorithms.com/geometry/lattice-points.html","title":"Algoritmos varios de Pol\u00edgonos:"},{"location":"resources/geometry/#convex-hull","text":"Buen video explicando Convex Hull: youtube: 5 6 Convex Hull 1350 Monotone Chain Algorithm (algoritmo recomendado): https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain C\u00f3digo de ejemplo Convex Hull Trick: https://wcipeg.com/wiki/Convex_hull_trick https://stackoverflow.com/questions/17834699/what-is-convex-hull-trick-exactly","title":"Convex Hull:"},{"location":"resources/geometry/#calculo-de-areas","text":"Teorema de Green (aplicado al caso particular de calcular \u00e1reas): lecturas: https://math.stackexchange.com/questions/199003/proving-greens-theorem-for-computing-area https://mathinsight.org/greens_theorem_find_area videos: youtube: Green's Theorem youtube: 78 - Finding area with Green's theorem How to Use Green's Theorem to Find the Area of A Region Green's Theorem: area under an arch - MIT 18.02SC Multivariable Calculus, Fall 2010 C\u00f3digos de ejemplo Aplicaci\u00f3n a pol\u00edgonos - \u00e1rea de un pol\u00edgono simple: http://math.blogoverflow.com/2014/06/04/greens-theorem-and-area-of-polygons/ http://stackoverflow.com/questions/451426/how-do-i-calculate-the-area-of-a-2d-polygon c\u00f3digo de ejemplo (ctrl+f \"area\")","title":"C\u00e1lculo de \u00c1reas:"},{"location":"resources/geometry/#sweep-line-y-radial-sweep-line","text":"codeforces: How to sweep like a Sir wikipedia: Sweep line algorithm topcoder: line sweep algorithms","title":"Sweep Line y Radial Sweep Line:"},{"location":"resources/geometry/#dualidad-linea-punto","text":"Buenas slides explicando dualidad: https://algo.kaust.edu.sa/Documents/cs372l13.pdf Excelente pdf con demostraciones: https://pdfs.semanticscholar.org/810c/e0c19283481567c6545bf8c0cc8a4dcb8a1f.pdf Aplicaci\u00f3n interactiva: http://students.cec.wustl.edu/~tdeck/duality/","title":"Dualidad L\u00ednea - Punto:"},{"location":"resources/graphs/","text":"Grafos Introducci\u00f3n a Grafos Slides de Nico Lehmann sobre Grafos (muy buenas): http://campamento2015.progcomp.cl/material (revisar la parte Grafos) http://campamento2016.progcomp.cl/material (revisar la parte Grafos) (youtube) Data structures: Introduction to graphs (youtube) Data structures: Properties of Graphs (youtube) Graph Representation part 01 - Edge List (youtube) Graph Representation part 02 - Adjacency Matrix (youtube) Graph Representation part 03 - Adjacency List (youtube) Graph Theory: 02. Definition of a Graph (youtube) Graph Theory: 03. Examples of Graphs (youtube) Graph Theory: 04. Families of Graphs (youtube) Graph Theory: 36. Definition of a Tree Grafo dirigido vs Grafo no-dirigido: (youtube) Graph Types Directed and Undirected Graph (geeksforgeeks) Graph and its representations Algoritmos de Graph Traversal Breadth First Search (BFS) : cp-algorithms: BFS c\u00f3digo de ejemplo Depth First Search (DFS) : cp-algorithms: DFS c\u00f3digo de ejemplo (youtube) 5.1 Graph Traversals - BFS & DFS -Breadth First Search and Depth First Search (youtube) Graph Traversals - Breadth First and Depth First (youtube) Graph : BFS, DFS (youtube) Algorithms: Graph Search, DFS and BFS Flood Fill: https://en.wikipedia.org/wiki/Flood_fill Di\u00e1metro de un \u00c1rbol: cs.stackexchange: Algorithm to find diameter of a tree using BFS/DFS. Why does it work? c\u00f3digo de ejemplo Topological Sort: (youtube) Topological Sort Algorithm | Graph Theory (youtube) Topological Sort Graph Algorithm Codeforces - How to check cycles inside a Topological Sort C\u00f3digos de ejemplo Algoritmos de Camino M\u00e1s Corto (Shortest Path): De un nodo ( single source ) a todos los dem\u00e1s nodos: Dijkstra (cuando NO hay aristas negativas): (youtube) Dijkstra's algorithm in 3 minutes \u2014 Review and example (youtube) Dijkstra's Algorithm (5 minutos) (youtube) Muy buen ejemplo de Dijkstra (youtube) Correctness of Dijkstra's Algorithm cp-algorithms: dijkstra (incluye c\u00f3digo de ejemplo) C\u00f3digo de ejemplo C\u00f3digo de ejemplo Ignacio Bellman-Ford (cuando S\u00cd hay aristas negativas): (youtube) Bellman-Ford in 5 minutes \u2014 Step by step example (youtube) Bellman-Ford in 4 minutes \u2014 Theory (youtube) Bellman Ford Algorithm | Shortest path & Negative cycles | Graph Theory (video) Bellman-Ford Algorithm: Proof of Correctness (youtube) Bellman Ford Algorithm - Single Source Shortest Path - Dynamic Programming (17m) cp-algorithms: bellman-ford (incluye c\u00f3digos de ejemplo) C\u00f3digo de ejemplo \u00bfC\u00f3mo detectar un ciclo negativo con Bellman-Ford? GeeksforGeeks - Detect a negative cycle in a Graph | (Bellman Ford) (PDF) Proof of Correctness De todos los nodos ( multiple source ) a todos los nodos: Floyd-Warshall (youtube) Floyd\u2013Warshall algorithm in 4 minutes (youtube) All Pairs Shortest Path (Floyd-Warshall) - Dynamic Programming (14m) cp-algorithms: floyd-warshall (incluye c\u00f3digo de ejemplo) C\u00f3digo de ejemplo \u00bfQu\u00e9 pasa cuando hay ciclos negativos? (wikipedia) Behavior_with_negative_cycles Floyd-Warshall with negative cycles. How do I find all undefined paths? Minimum Spanning Tree (MST): (youtube) 3.5 Prims and Kruskals Algorithms - Greedy Method Kruskal's Algorithm: (youtube) Kruskal's algorithm in 2 minutes \u2014 Review and example (youtube) Kruskal's algorithm Minimum Spanning Tree Graph Algorithm Prim's Algorithm: (youtube) Prim's algorithm in 2 minutes \u2014 Review and example (youtube) Prim's Algorithm Minimum Spanning Tree Graph Algorithm Correcteness Proofs: (youtube) Proof of Cut Property (youtube) Proof of Prim's MST algorithm using cut property (youtube) Correctness of Kruskal's Algorithm cp-algorithms: Minimum Spanning Tree - Prim's Algorithm Minimum Spanning Tree - Kruskal Minimum Spanning Tree - Kruskal with Disjoint Set Union Second best Minimum Spanning Tree - Using Kruskal and Lowest Common Ancestor C\u00f3digos de ejemplo Lowest Common Ancestor (LCA): General Overview of Methods: http://codeforces.com/blog/entry/16221 (skip to the LCA part) M\u00e9todo 1 ( RECOMENDADO ): Binary Lifting Method (aka jump pointers ): Codeforces: Lowest common ancestor's binary lifting method for path queries on trees Nota: como dice el post, este m\u00e9todo es muy \u00fatil ya que se puede adaptar para computar consultas sobre caminos entre 2 nodos en un \u00e1rbol. (youtube) Episode 17 - Binary Lifting M\u00e9todo 2: Euler Tour + Range Minimun Query: Topcoder: range minimum query and lowest common ancestor (youtube) Episode 28 - Sparse Tables and LCA (youtube) Sparse Table Algorithm Range Minimum Query C\u00f3digos de ejemplo (ambos m\u00e9todos) Level Ancestor: https://en.wikipedia.org/wiki/Level_ancestor_problem https://www.quora.com/Why-does-storing-log-N-pointers-work-in-the-jump-pointer-solution-of-the-level-ancestor-problem C\u00f3digo de ejemplo Puntos de articulaci\u00f3n, Aristas de corte y Componentes Biconexas: (youtube) Graph Theory: 53. Cut-Vertices (youtube) Graph Theory: 55. Bridges and Blocks HackerEarth: Articulation Points and Bridges HackerEarth: Biconnected Components (PDF) MTL776 Graph algorithms: Cut vertices, Cut Edges and Biconnected components (youtube) 5.2 Articulation Point and Biconnected Components (youtube) Articulation Points Graph Algorithm C\u00f3digo de ejemplo Teoremas relevantes: Menger's Theorem https://en.wikipedia.org/wiki/Menger%27s_theorem (youtube) Menger's Theorem https://www.quora.com/How-can-I-prove-without-using-Mengers-theorem-that-any-two-vertices-of-a-2-connected-graph-lie-on-a-common-cycle Strongly Connected Components (SCC): M\u00e9todo 1: Tarjan's Algorithm for SCC (youtube) Tarjans Strongly Connected Components algorithm | Graph Theory (geeksforgeeks) Tarjan\u2019s Algorithm to find Strongly Connected Components M\u00e9todo 2: Kosaraju's Algorithm for SCC (youtube) Strongly Connected Components Kosaraju's Algorithm Graph Algorithm (geeksforgeeks) Kosaraju's Algorithm to find Strongly Connected Components (cp-algorithms) Finding strongly connected components, Building condensation graph (quora) Diferencias entre Tarjan y Kosaraju C\u00f3digos de ejemplo Flujo M\u00e1ximo y aplicaciones: (youtube) Episode 33 - Maximum Flow Intuition Cu\u00e1ndo se usa: ( MUY RECOMENDADO ) (youtube) Ejemplos de problemas usando flujo geeksforgeeks: Maximum Bipartite Matching Ford-Fulkerson Algorithm: (youtube) Ford-Fulkerson in 5 minutes \u2014 Step by step example (youtube) Residual Networks - Georgia Tech - Computability, Complexity, Theory: Algorithms (youtube) Edmonds Karp Algorithm to find the Max Flow (youtube) Ford Fulkerson Algorithm Edmonds Karp Algorithm For Max Flow Intuici\u00f3n detr\u00e1s del grafo residual: cs.stackexchnge: Residual Graph in Maximum Flow Dinic Algorithm ( RECOMENDADO ): (youtube) CS261 Lecture 2 (Edmonds-Karp/Dinic algorithms) (PDF) CMU, 15-451 Algorithms, Fall 2014: Lecture 11: Dinic\u2019s Algorithm (PDF) Stanford, CS261: A Second Course in Algorithms, Lecture #2: Augmenting Path Algorithms for Maximum Flow C\u00f3digo de ejemplo Heavy-Light Decomposition: https://cp-algorithms.com/graph/hld.html https://blog.anudeep2011.com/heavy-light-decomposition/ https://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/ http://codeforces.com/blog/entry/22072","title":"Graphs"},{"location":"resources/graphs/#grafos","text":"","title":"Grafos"},{"location":"resources/graphs/#introduccion-a-grafos","text":"Slides de Nico Lehmann sobre Grafos (muy buenas): http://campamento2015.progcomp.cl/material (revisar la parte Grafos) http://campamento2016.progcomp.cl/material (revisar la parte Grafos) (youtube) Data structures: Introduction to graphs (youtube) Data structures: Properties of Graphs (youtube) Graph Representation part 01 - Edge List (youtube) Graph Representation part 02 - Adjacency Matrix (youtube) Graph Representation part 03 - Adjacency List (youtube) Graph Theory: 02. Definition of a Graph (youtube) Graph Theory: 03. Examples of Graphs (youtube) Graph Theory: 04. Families of Graphs (youtube) Graph Theory: 36. Definition of a Tree Grafo dirigido vs Grafo no-dirigido: (youtube) Graph Types Directed and Undirected Graph (geeksforgeeks) Graph and its representations","title":"Introducci\u00f3n a Grafos"},{"location":"resources/graphs/#algoritmos-de-graph-traversal","text":"Breadth First Search (BFS) : cp-algorithms: BFS c\u00f3digo de ejemplo Depth First Search (DFS) : cp-algorithms: DFS c\u00f3digo de ejemplo (youtube) 5.1 Graph Traversals - BFS & DFS -Breadth First Search and Depth First Search (youtube) Graph Traversals - Breadth First and Depth First (youtube) Graph : BFS, DFS (youtube) Algorithms: Graph Search, DFS and BFS Flood Fill: https://en.wikipedia.org/wiki/Flood_fill","title":"Algoritmos de Graph Traversal"},{"location":"resources/graphs/#diametro-de-un-arbol","text":"cs.stackexchange: Algorithm to find diameter of a tree using BFS/DFS. Why does it work? c\u00f3digo de ejemplo","title":"Di\u00e1metro de un \u00c1rbol:"},{"location":"resources/graphs/#topological-sort","text":"(youtube) Topological Sort Algorithm | Graph Theory (youtube) Topological Sort Graph Algorithm Codeforces - How to check cycles inside a Topological Sort C\u00f3digos de ejemplo","title":"Topological Sort:"},{"location":"resources/graphs/#algoritmos-de-camino-mas-corto-shortest-path","text":"De un nodo ( single source ) a todos los dem\u00e1s nodos:","title":"Algoritmos de Camino M\u00e1s Corto (Shortest Path):"},{"location":"resources/graphs/#dijkstra-cuando-no-hay-aristas-negativas","text":"(youtube) Dijkstra's algorithm in 3 minutes \u2014 Review and example (youtube) Dijkstra's Algorithm (5 minutos) (youtube) Muy buen ejemplo de Dijkstra (youtube) Correctness of Dijkstra's Algorithm cp-algorithms: dijkstra (incluye c\u00f3digo de ejemplo) C\u00f3digo de ejemplo C\u00f3digo de ejemplo Ignacio","title":"Dijkstra (cuando NO hay aristas negativas):"},{"location":"resources/graphs/#bellman-ford-cuando-si-hay-aristas-negativas","text":"(youtube) Bellman-Ford in 5 minutes \u2014 Step by step example (youtube) Bellman-Ford in 4 minutes \u2014 Theory (youtube) Bellman Ford Algorithm | Shortest path & Negative cycles | Graph Theory (video) Bellman-Ford Algorithm: Proof of Correctness (youtube) Bellman Ford Algorithm - Single Source Shortest Path - Dynamic Programming (17m) cp-algorithms: bellman-ford (incluye c\u00f3digos de ejemplo) C\u00f3digo de ejemplo \u00bfC\u00f3mo detectar un ciclo negativo con Bellman-Ford? GeeksforGeeks - Detect a negative cycle in a Graph | (Bellman Ford) (PDF) Proof of Correctness De todos los nodos ( multiple source ) a todos los nodos:","title":"Bellman-Ford (cuando S\u00cd hay aristas negativas):"},{"location":"resources/graphs/#floyd-warshall","text":"(youtube) Floyd\u2013Warshall algorithm in 4 minutes (youtube) All Pairs Shortest Path (Floyd-Warshall) - Dynamic Programming (14m) cp-algorithms: floyd-warshall (incluye c\u00f3digo de ejemplo) C\u00f3digo de ejemplo \u00bfQu\u00e9 pasa cuando hay ciclos negativos? (wikipedia) Behavior_with_negative_cycles Floyd-Warshall with negative cycles. How do I find all undefined paths?","title":"Floyd-Warshall"},{"location":"resources/graphs/#minimum-spanning-tree-mst","text":"(youtube) 3.5 Prims and Kruskals Algorithms - Greedy Method Kruskal's Algorithm: (youtube) Kruskal's algorithm in 2 minutes \u2014 Review and example (youtube) Kruskal's algorithm Minimum Spanning Tree Graph Algorithm Prim's Algorithm: (youtube) Prim's algorithm in 2 minutes \u2014 Review and example (youtube) Prim's Algorithm Minimum Spanning Tree Graph Algorithm Correcteness Proofs: (youtube) Proof of Cut Property (youtube) Proof of Prim's MST algorithm using cut property (youtube) Correctness of Kruskal's Algorithm cp-algorithms: Minimum Spanning Tree - Prim's Algorithm Minimum Spanning Tree - Kruskal Minimum Spanning Tree - Kruskal with Disjoint Set Union Second best Minimum Spanning Tree - Using Kruskal and Lowest Common Ancestor C\u00f3digos de ejemplo","title":"Minimum Spanning Tree (MST):"},{"location":"resources/graphs/#lowest-common-ancestor-lca","text":"General Overview of Methods: http://codeforces.com/blog/entry/16221 (skip to the LCA part) M\u00e9todo 1 ( RECOMENDADO ): Binary Lifting Method (aka jump pointers ): Codeforces: Lowest common ancestor's binary lifting method for path queries on trees Nota: como dice el post, este m\u00e9todo es muy \u00fatil ya que se puede adaptar para computar consultas sobre caminos entre 2 nodos en un \u00e1rbol. (youtube) Episode 17 - Binary Lifting M\u00e9todo 2: Euler Tour + Range Minimun Query: Topcoder: range minimum query and lowest common ancestor (youtube) Episode 28 - Sparse Tables and LCA (youtube) Sparse Table Algorithm Range Minimum Query C\u00f3digos de ejemplo (ambos m\u00e9todos) Level Ancestor: https://en.wikipedia.org/wiki/Level_ancestor_problem https://www.quora.com/Why-does-storing-log-N-pointers-work-in-the-jump-pointer-solution-of-the-level-ancestor-problem C\u00f3digo de ejemplo","title":"Lowest Common Ancestor (LCA):"},{"location":"resources/graphs/#puntos-de-articulacion-aristas-de-corte-y-componentes-biconexas","text":"(youtube) Graph Theory: 53. Cut-Vertices (youtube) Graph Theory: 55. Bridges and Blocks HackerEarth: Articulation Points and Bridges HackerEarth: Biconnected Components (PDF) MTL776 Graph algorithms: Cut vertices, Cut Edges and Biconnected components (youtube) 5.2 Articulation Point and Biconnected Components (youtube) Articulation Points Graph Algorithm C\u00f3digo de ejemplo Teoremas relevantes: Menger's Theorem https://en.wikipedia.org/wiki/Menger%27s_theorem (youtube) Menger's Theorem https://www.quora.com/How-can-I-prove-without-using-Mengers-theorem-that-any-two-vertices-of-a-2-connected-graph-lie-on-a-common-cycle","title":"Puntos de articulaci\u00f3n, Aristas de corte y Componentes Biconexas:"},{"location":"resources/graphs/#strongly-connected-components-scc","text":"M\u00e9todo 1: Tarjan's Algorithm for SCC (youtube) Tarjans Strongly Connected Components algorithm | Graph Theory (geeksforgeeks) Tarjan\u2019s Algorithm to find Strongly Connected Components M\u00e9todo 2: Kosaraju's Algorithm for SCC (youtube) Strongly Connected Components Kosaraju's Algorithm Graph Algorithm (geeksforgeeks) Kosaraju's Algorithm to find Strongly Connected Components (cp-algorithms) Finding strongly connected components, Building condensation graph (quora) Diferencias entre Tarjan y Kosaraju C\u00f3digos de ejemplo","title":"Strongly Connected Components (SCC):"},{"location":"resources/graphs/#flujo-maximo-y-aplicaciones","text":"(youtube) Episode 33 - Maximum Flow Intuition Cu\u00e1ndo se usa: ( MUY RECOMENDADO ) (youtube) Ejemplos de problemas usando flujo geeksforgeeks: Maximum Bipartite Matching Ford-Fulkerson Algorithm: (youtube) Ford-Fulkerson in 5 minutes \u2014 Step by step example (youtube) Residual Networks - Georgia Tech - Computability, Complexity, Theory: Algorithms (youtube) Edmonds Karp Algorithm to find the Max Flow (youtube) Ford Fulkerson Algorithm Edmonds Karp Algorithm For Max Flow Intuici\u00f3n detr\u00e1s del grafo residual: cs.stackexchnge: Residual Graph in Maximum Flow Dinic Algorithm ( RECOMENDADO ): (youtube) CS261 Lecture 2 (Edmonds-Karp/Dinic algorithms) (PDF) CMU, 15-451 Algorithms, Fall 2014: Lecture 11: Dinic\u2019s Algorithm (PDF) Stanford, CS261: A Second Course in Algorithms, Lecture #2: Augmenting Path Algorithms for Maximum Flow C\u00f3digo de ejemplo","title":"Flujo M\u00e1ximo y aplicaciones:"},{"location":"resources/graphs/#heavy-light-decomposition","text":"https://cp-algorithms.com/graph/hld.html https://blog.anudeep2011.com/heavy-light-decomposition/ https://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/ http://codeforces.com/blog/entry/22072","title":"Heavy-Light Decomposition:"},{"location":"resources/greedy/","text":"Greedy (Youtube) Introduction to Greedy Algorithms - GeeksforGeeks (Youtube) Introduction to Greedy Method (Youtube) 3. Greedy Method - Introduction (Youtube) Greedy Algorithms Tutorials - GeeksforGeeks","title":"Greedy"},{"location":"resources/greedy/#greedy","text":"(Youtube) Introduction to Greedy Algorithms - GeeksforGeeks (Youtube) Introduction to Greedy Method (Youtube) 3. Greedy Method - Introduction (Youtube) Greedy Algorithms Tutorials - GeeksforGeeks","title":"Greedy"},{"location":"resources/math/","text":"Matem\u00e1ticas N\u00fameros Primos \u00bfQu\u00e9 es un n\u00famero primo? What's a Prime Number? Wikipedia - Prime Number Teorema fundamental de la aritm\u00e9tica: todo natural tiene una \u00fanica factorizaci\u00f3n prima wikipedia - Fundamenetal theorem of arithmetic The Fundamental Theorem of Arithmetic Number Theory - Fundamental Theorem of Arithmetic Tests de Primalidad (c\u00f3mo saber si un n\u00famero es primo): CP-Algorithms: Primality tests stackoverflow - Fastest algorithm for primality test Miller Rabin: cp-algorithms: Miller Rabin https://www.geeksforgeeks.org/primality-test-set-3-miller-rabin/ deterministic variant: https://miller-rabin.appspot.com/ C\u00f3digos de ejemplo Criba de Erat\u00f3stenes (todos los primos hasta N): wikipedia: Sieve of Eratosthenes (hay un GIF muy bueno) (youtube) Finding Prime numbers - Sieve of Eratosthenes (youtube) Criba de Erat\u00f3stenes [ICPCCL 2016] C\u00f3digo de ejemplo Criba de Erat\u00f3stenes Segmentada (m\u00e1s r\u00e1pida): https://github.com/kimwalisch/primesieve/wiki/Segmented-sieve-of-Eratosthenes (cp-algorithms) Segmented sieve of eratosthenes (geeksforgeeks) Segmented Sieve (Print Primes in a Range) Factorizaci\u00f3n Prima de N\u00fameros Enteros: cp-algorithms: Integer factorization c\u00f3digo de ejemplo Factorizaci\u00f3n Prima de Factoriales: http://mathforum.org/library/drmath/view/67291.html https://janmr.com/blog/2010/10/prime-factors-of-factorial-numbers/ https://forthright48.com/prime-factorization-of-factorial/ c\u00f3digo de ejemplo Aritm\u00e9tica Modular: \u00bfDe qu\u00e9 se trata Aritm\u00e9tica Modular? Art of Problem Solving: Modular Arithmetic / Introduction (wikipedia) Modular Arithmetic (youtube) Introduction to Modular arithmetic (youtube) High level introduction to modular arithmetic (youtube) Congruence (Modular Arithmetic) & 5 Properties Explained with 7 Problems: Ultimate Shortcuts (wikipedia) Identidades en Aritm\u00e9tica Modular Modular Inverse: cp-algorithms - Modular Inverse Youtube - Multiplicative inverses mod n Modular Exponentiation By Squaring: https://en.wikipedia.org/wiki/Modular_exponentiation#Right-to-left_binary_method https://github.com/PabloMessina/Competitive-Programming-Material/blob/master/Mathematics/binary_modular_exponentiation.cpp Modular Fibonacci with Exponentiation by Squaring: http://mathoverflow.net/questions/40816/fibonacci-series-mod-a-number Binary Exponentiation: (cp-algorithms) Binary Exponentiation C\u00f3digo de ejemplo Conteo y Combinatoria modular: Muy buen art\u00edculo sobre distintos m\u00e9todos para calcular combinatorias Modular Binomial Coefficient (Choose(n,k) mod X): c\u00f3digo de ejemplo Modular Multinomial Coefficient: c\u00f3digo de ejemplo Algoritmo de Euclides: c\u00f3mo encontrar el GCD entre dos n\u00fameros - (youtube) Euclidean Algorithm (Proof) - (youtube) Number Theory: Euclidean Algorithm - An example - (cp-algorithms) Euclidean algorithm for computing the greatest common divisor - (youtube) (Discrete Math 1) Euclidian Algorithm - Euclidean Algorithm \u2013 Greatest Common Divisor - (geeksforgeeks) std::gcd | C++ inbuilt function for finding GCD LCM (m\u00ednimo com\u00fan m\u00faltiplo): https://cp-algorithms.com/algebra/euclid-algorithm.html (revisar final de la p\u00e1gina) Algoritmo de Euclides Extendido (gcdext): https://forthright48.com/extended-euclidean-algorithm/ (cp-algorithms) Extended Euclidean Algorithm (math.stackexchange) gcdext con n\u00fameros negativos? (youtube) Algoritmo de Euclides [ICPCCL 2016] (youtube) The Extended Euclidean algorithm c\u00f3digo de ejemplo Aplicaciones de Euclides Extendido: Modular Inverse: (cp-algorithms) modular inverse Linear Diophantine Equations: (cp-algorithms) linear dophantine equation (youtube) N1--Introduction to Linear Diophantine Equations (youtube) N2--Solve Basic Linear Diophantine Equation (youtube) Number Theory: Diophantine Equation: ax+by=gcd(a,b) (PDF) http://gauss.math.luc.edu/greicius/Math201/Fall2012/Lectures/linear-diophantine.article.pdf http://mathonline.wikidot.com/solutions-to-linear-diophantine-equations Linear Congruence Equation: (cp-algorithms) Linear Congruence Equation (PDF) http://gauss.math.luc.edu/greicius/Math201/Fall2012/Lectures/linear-congruences.article.pdf C\u00f3digos de ejemplos Chinese Remainder Theorem (CRT): (codeforces) [Tutorial] Chinese Remainder Theorem (youtube) The Chinese Remainder Theorem made easy (youtube) Chinese Remainder Theorem Chinese Remainder Theorem Part 1 \u2013 Coprime Moduli Chinese Remainder Theorem Part 2 \u2013 Non Coprime Moduli c\u00f3digo de ejemplo Lucas's theorem: wikipedia - Lucas's theorem choose(n,k) mod M using Chinese remainder theorem? Euler's Theorem & Euler's Totient Function: wikipedia - Euler's Theorem wikipedia - Euler's Totient Function cp-algorithms: Euler's Totient Function Integraci\u00f3n Num\u00e9rica: (Wikipedia) https://en.wikipedia.org/wiki/Numerical_integration (Codeforces Tasks involving numerical integration (youtube) Explanation of Simpson's rule | MIT 18.01SC Single Variable Calculus, Fall 2010 (youtube) Simpson's Rule & Numerical Integration (youtube) Numerical Integration With Trapezoidal and Simpson's Rule","title":"Mathematics"},{"location":"resources/math/#matematicas","text":"","title":"Matem\u00e1ticas"},{"location":"resources/math/#numeros-primos","text":"\u00bfQu\u00e9 es un n\u00famero primo? What's a Prime Number? Wikipedia - Prime Number Teorema fundamental de la aritm\u00e9tica: todo natural tiene una \u00fanica factorizaci\u00f3n prima wikipedia - Fundamenetal theorem of arithmetic The Fundamental Theorem of Arithmetic Number Theory - Fundamental Theorem of Arithmetic Tests de Primalidad (c\u00f3mo saber si un n\u00famero es primo): CP-Algorithms: Primality tests stackoverflow - Fastest algorithm for primality test Miller Rabin: cp-algorithms: Miller Rabin https://www.geeksforgeeks.org/primality-test-set-3-miller-rabin/ deterministic variant: https://miller-rabin.appspot.com/ C\u00f3digos de ejemplo Criba de Erat\u00f3stenes (todos los primos hasta N): wikipedia: Sieve of Eratosthenes (hay un GIF muy bueno) (youtube) Finding Prime numbers - Sieve of Eratosthenes (youtube) Criba de Erat\u00f3stenes [ICPCCL 2016] C\u00f3digo de ejemplo Criba de Erat\u00f3stenes Segmentada (m\u00e1s r\u00e1pida): https://github.com/kimwalisch/primesieve/wiki/Segmented-sieve-of-Eratosthenes (cp-algorithms) Segmented sieve of eratosthenes (geeksforgeeks) Segmented Sieve (Print Primes in a Range) Factorizaci\u00f3n Prima de N\u00fameros Enteros: cp-algorithms: Integer factorization c\u00f3digo de ejemplo Factorizaci\u00f3n Prima de Factoriales: http://mathforum.org/library/drmath/view/67291.html https://janmr.com/blog/2010/10/prime-factors-of-factorial-numbers/ https://forthright48.com/prime-factorization-of-factorial/ c\u00f3digo de ejemplo","title":"N\u00fameros Primos"},{"location":"resources/math/#aritmetica-modular","text":"\u00bfDe qu\u00e9 se trata Aritm\u00e9tica Modular? Art of Problem Solving: Modular Arithmetic / Introduction (wikipedia) Modular Arithmetic (youtube) Introduction to Modular arithmetic (youtube) High level introduction to modular arithmetic (youtube) Congruence (Modular Arithmetic) & 5 Properties Explained with 7 Problems: Ultimate Shortcuts (wikipedia) Identidades en Aritm\u00e9tica Modular Modular Inverse: cp-algorithms - Modular Inverse Youtube - Multiplicative inverses mod n Modular Exponentiation By Squaring: https://en.wikipedia.org/wiki/Modular_exponentiation#Right-to-left_binary_method https://github.com/PabloMessina/Competitive-Programming-Material/blob/master/Mathematics/binary_modular_exponentiation.cpp Modular Fibonacci with Exponentiation by Squaring: http://mathoverflow.net/questions/40816/fibonacci-series-mod-a-number","title":"Aritm\u00e9tica Modular:"},{"location":"resources/math/#binary-exponentiation","text":"(cp-algorithms) Binary Exponentiation C\u00f3digo de ejemplo","title":"Binary Exponentiation:"},{"location":"resources/math/#conteo-y-combinatoria-modular","text":"Muy buen art\u00edculo sobre distintos m\u00e9todos para calcular combinatorias Modular Binomial Coefficient (Choose(n,k) mod X): c\u00f3digo de ejemplo Modular Multinomial Coefficient: c\u00f3digo de ejemplo","title":"Conteo y Combinatoria modular:"},{"location":"resources/math/#algoritmo-de-euclides","text":"c\u00f3mo encontrar el GCD entre dos n\u00fameros - (youtube) Euclidean Algorithm (Proof) - (youtube) Number Theory: Euclidean Algorithm - An example - (cp-algorithms) Euclidean algorithm for computing the greatest common divisor - (youtube) (Discrete Math 1) Euclidian Algorithm - Euclidean Algorithm \u2013 Greatest Common Divisor - (geeksforgeeks) std::gcd | C++ inbuilt function for finding GCD LCM (m\u00ednimo com\u00fan m\u00faltiplo): https://cp-algorithms.com/algebra/euclid-algorithm.html (revisar final de la p\u00e1gina)","title":"Algoritmo de Euclides:"},{"location":"resources/math/#algoritmo-de-euclides-extendido-gcdext","text":"https://forthright48.com/extended-euclidean-algorithm/ (cp-algorithms) Extended Euclidean Algorithm (math.stackexchange) gcdext con n\u00fameros negativos? (youtube) Algoritmo de Euclides [ICPCCL 2016] (youtube) The Extended Euclidean algorithm c\u00f3digo de ejemplo","title":"Algoritmo de Euclides Extendido (gcdext):"},{"location":"resources/math/#aplicaciones-de-euclides-extendido","text":"","title":"Aplicaciones de Euclides Extendido:"},{"location":"resources/math/#modular-inverse","text":"(cp-algorithms) modular inverse","title":"Modular Inverse:"},{"location":"resources/math/#linear-diophantine-equations","text":"(cp-algorithms) linear dophantine equation (youtube) N1--Introduction to Linear Diophantine Equations (youtube) N2--Solve Basic Linear Diophantine Equation (youtube) Number Theory: Diophantine Equation: ax+by=gcd(a,b) (PDF) http://gauss.math.luc.edu/greicius/Math201/Fall2012/Lectures/linear-diophantine.article.pdf http://mathonline.wikidot.com/solutions-to-linear-diophantine-equations","title":"Linear Diophantine Equations:"},{"location":"resources/math/#linear-congruence-equation","text":"(cp-algorithms) Linear Congruence Equation (PDF) http://gauss.math.luc.edu/greicius/Math201/Fall2012/Lectures/linear-congruences.article.pdf C\u00f3digos de ejemplos","title":"Linear Congruence Equation:"},{"location":"resources/math/#chinese-remainder-theorem-crt","text":"(codeforces) [Tutorial] Chinese Remainder Theorem (youtube) The Chinese Remainder Theorem made easy (youtube) Chinese Remainder Theorem Chinese Remainder Theorem Part 1 \u2013 Coprime Moduli Chinese Remainder Theorem Part 2 \u2013 Non Coprime Moduli c\u00f3digo de ejemplo","title":"Chinese Remainder Theorem (CRT):"},{"location":"resources/math/#lucass-theorem","text":"wikipedia - Lucas's theorem choose(n,k) mod M using Chinese remainder theorem?","title":"Lucas's theorem:"},{"location":"resources/math/#eulers-theorem-eulers-totient-function","text":"wikipedia - Euler's Theorem wikipedia - Euler's Totient Function cp-algorithms: Euler's Totient Function","title":"Euler's Theorem &amp; Euler's Totient Function:"},{"location":"resources/math/#integracion-numerica","text":"(Wikipedia) https://en.wikipedia.org/wiki/Numerical_integration (Codeforces Tasks involving numerical integration (youtube) Explanation of Simpson's rule | MIT 18.01SC Single Variable Calculus, Fall 2010 (youtube) Simpson's Rule & Numerical Integration (youtube) Numerical Integration With Trapezoidal and Simpson's Rule","title":"Integraci\u00f3n Num\u00e9rica:"},{"location":"resources/search/","text":"(Bi|Ter)nary Search Binary Search Youtube - Excelente video explicando binary search ( RECOMENDADO ) Youtube - muy buena comparaci\u00f3n entre linear search y binary search (+ c\u00f3digo) Youtube - Algorithms: Binary Search http://progcomp.cl/binarysearch Ejemplo de implementaci\u00f3n en C++ geeksforgeeks - Binary Search functions in C++ STL (binary_search, lower_bound and upper_bound) caso especial: binary search on doubles - codeforces cuando el problema es continuo (no-discreto) Ternary Search https://www.hackerearth.com/practice/algorithms/searching/ternary-search/tutorial/ https://en.wikipedia.org/wiki/Ternary_search https://github.com/PabloMessina/Competitive-Programming-Material/blob/master/Search/TernarySearch.cpp C\u00f3mo reducir Ternary Search a Binary Search : Codeforces - The great ternary search hoax","title":"(Bi|Ter)nary Search"},{"location":"resources/search/#biternary-search","text":"","title":"(Bi|Ter)nary Search"},{"location":"resources/search/#binary-search","text":"Youtube - Excelente video explicando binary search ( RECOMENDADO ) Youtube - muy buena comparaci\u00f3n entre linear search y binary search (+ c\u00f3digo) Youtube - Algorithms: Binary Search http://progcomp.cl/binarysearch Ejemplo de implementaci\u00f3n en C++ geeksforgeeks - Binary Search functions in C++ STL (binary_search, lower_bound and upper_bound) caso especial: binary search on doubles - codeforces cuando el problema es continuo (no-discreto)","title":"Binary Search"},{"location":"resources/search/#ternary-search","text":"https://www.hackerearth.com/practice/algorithms/searching/ternary-search/tutorial/ https://en.wikipedia.org/wiki/Ternary_search https://github.com/PabloMessina/Competitive-Programming-Material/blob/master/Search/TernarySearch.cpp C\u00f3mo reducir Ternary Search a Binary Search : Codeforces - The great ternary search hoax","title":"Ternary Search"},{"location":"resources/sqrtdecomp/","text":"Square Root Decomposition cp-algorithms: square decomposition Mo's Algorithm: cp-algorhtms: Mo's algorithm geeksforgeeks: Mo's algorithm (query square root decomposition) geeksforgeeks: extended Mo's algorithm (O(1) time complexity)","title":"Square Root Decomposition"},{"location":"resources/sqrtdecomp/#square-root-decomposition","text":"cp-algorithms: square decomposition Mo's Algorithm: cp-algorhtms: Mo's algorithm geeksforgeeks: Mo's algorithm (query square root decomposition) geeksforgeeks: extended Mo's algorithm (O(1) time complexity)","title":"Square Root Decomposition"},{"location":"resources/strings/","text":"Strings Suffix Automaton: codeforces - A short guide to suffix automata https://cp-algorithms.com/string/suffix-automaton.html youtube - Suffix Automation Explanation Suffix Array: \u00bfQu\u00e9 es un suffix array?: Youtube - Suffix Array introduction Motivaci\u00f3n para Suffix Arrays: Youtube - 35 6 Suffix Arrays C\u00f3mo construir un Suffix Array eficientemente: Youtube - Construction of suffix arrays https://www.cs.helsinki.fi/u/tpkarkka/opetus/10s/spa/lecture11.pdf HackerRank - Suffix Array cp-algorithms: Suffix Array Longest Common Prefix (LCP) : Youtube - Longest Common Prefix (LCP) array Codeforces - LCP from suffix array geeksforgeeks - kasai\u2019s Algorithm for Construction of LCP array from Suffix Array C\u00f3digos de Ejemplo: suffix_array.cpp Codeforces - Suffix Arrays KMP (String Pattern Matching): youtube: KMP String matching algorithm youtube: KMP Searching Algorithm youtube: 9.1 Knuth-Morris-Pratt KMP String Matching Algorithm youtube: Knuth\u2013Morris\u2013Pratt(KMP) Pattern Matching(Substring search) youtube: Knuth\u2013Morris\u2013Pratt(KMP) Pattern Matching(Substring search) Part2 cp-algorithms: KMP c\u00f3digo de ejemplo Shortest Repeating Cycle http://www.geeksforgeeks.org/find-given-string-can-represented-substring-iterating-substring-n-times/ http://stackoverflow.com/questions/6021274/finding-shortest-repeating-cycle-in-word c\u00f3digo de ejemplo Trie: https://en.wikipedia.org/wiki/Trie youtube - Data Structures: Tries youtube - Trie Data Structure C\u00f3digo de ejemplo Rolling Hashing: https://progcomp.cl/rollinghashing cp-algorithms: String Hashing c\u00f3digo de ejemplo","title":"Strings"},{"location":"resources/strings/#strings","text":"","title":"Strings"},{"location":"resources/strings/#suffix-automaton","text":"codeforces - A short guide to suffix automata https://cp-algorithms.com/string/suffix-automaton.html youtube - Suffix Automation Explanation","title":"Suffix Automaton:"},{"location":"resources/strings/#suffix-array","text":"\u00bfQu\u00e9 es un suffix array?: Youtube - Suffix Array introduction Motivaci\u00f3n para Suffix Arrays: Youtube - 35 6 Suffix Arrays C\u00f3mo construir un Suffix Array eficientemente: Youtube - Construction of suffix arrays https://www.cs.helsinki.fi/u/tpkarkka/opetus/10s/spa/lecture11.pdf HackerRank - Suffix Array cp-algorithms: Suffix Array Longest Common Prefix (LCP) : Youtube - Longest Common Prefix (LCP) array Codeforces - LCP from suffix array geeksforgeeks - kasai\u2019s Algorithm for Construction of LCP array from Suffix Array C\u00f3digos de Ejemplo: suffix_array.cpp Codeforces - Suffix Arrays","title":"Suffix Array:"},{"location":"resources/strings/#kmp-string-pattern-matching","text":"youtube: KMP String matching algorithm youtube: KMP Searching Algorithm youtube: 9.1 Knuth-Morris-Pratt KMP String Matching Algorithm youtube: Knuth\u2013Morris\u2013Pratt(KMP) Pattern Matching(Substring search) youtube: Knuth\u2013Morris\u2013Pratt(KMP) Pattern Matching(Substring search) Part2 cp-algorithms: KMP c\u00f3digo de ejemplo Shortest Repeating Cycle http://www.geeksforgeeks.org/find-given-string-can-represented-substring-iterating-substring-n-times/ http://stackoverflow.com/questions/6021274/finding-shortest-repeating-cycle-in-word c\u00f3digo de ejemplo","title":"KMP (String Pattern Matching):"},{"location":"resources/strings/#trie","text":"https://en.wikipedia.org/wiki/Trie youtube - Data Structures: Tries youtube - Trie Data Structure C\u00f3digo de ejemplo","title":"Trie:"},{"location":"resources/strings/#rolling-hashing","text":"https://progcomp.cl/rollinghashing cp-algorithms: String Hashing c\u00f3digo de ejemplo","title":"Rolling Hashing:"},{"location":"resources/cpp/","text":"C++ Ejemplo de Hello World #include <bits/stdc++.h> //importa todo using namespace std ; //para no escribir std:: int main () { printf ( \"Hello world \\n \" ); //Usando syntax de C cout << \"Hello world \\n \" ; //Usando streams de C++ return 0 ; } Ejemplo de Template #pragma GCC optimize(\"Ofast\") #include <bits/stdc++.h> using namespace std ; // defines #define rep(i,a,b) for(int i = a; i < b; ++i) #define invrep(i,b,a) for(int i = b; i >= a; --i) #define umap unordered_map #define uset unordered_set #define ff first #define ss second // typedefs typedef pair < int , int > ii ; typedef unsigned long long int ull ; typedef long long int ll ; // ------------------------------- int main () { ios :: sync_with_stdio ( false ); cin . tie ( 0 ); return 0 ; } Instalando C++: Windows: Using GCC with MinGW MSYS2 Ubuntu: Instalar sudo apt-get install g++ Compilar en Ubuntu Mac: Installer en OSX Compilar con CLang Compilando y ejecutando c\u00f3digo en C++: Ejemplo de secuencia de pasos para resolver un problema en C++ en Windows usando la terminal (en Linux/Mac es bien parecido): - Crear un archivo example.cpp - Escribir un c\u00f3digo de C++ v\u00e1lido y guardar. - Abrir una terminal y navegar a la carpeta donde est\u00e1 el archivo. - Opci\u00f3n 1: - En la terminal, compilar y ejecutar con el comando: g++ -std=c++11 example.cpp && a.exe - Escribir el input directamente en la terminal - El output ir\u00e1 apareciendo poco a poco en la terminal (intercalado con el input) - Opci\u00f3n 2: - Crear un archivo en la carpeta donde est\u00e1n parados llamado input.txt, copiar y pegar el input ah\u00ed y guardar. - En la terminal, compilar y ejecutar con el comando: g++ -std=c++11 example.cpp && a.exe < input.txt - el output aparecer\u00e1 en la misma terminal - Opci\u00f3n 3: - Crear un archivo en la carpeta donde est\u00e1n parados llamado input.txt, copiar y pegar el input ah\u00ed y guardar. - En la terminal, compilar y ejecutar con el comando: g++ -std=c++11 example.cpp && a.exe < input.txt > output.txt - el output quedar\u00e1 guardado en el archivo output.txt Tutoriales para aprender C++ (youtube) Intro a la Programaci\u00f3n Competitiva en C++ (\\<\\<\\<\\< video cortito, recomendado) C++ for Python Programmers (\\<\\<\\<\\< por si vienes de Python) C++ Tutorial (SOLO LEARN: EVERYONE CAN CODE) http://www.cplusplus.com/doc/tutorial/ https://www.hackerrank.com/domains/cpp LearnCpp Documentaci\u00f3n Oficial de C++ (youtube) Intro a C++ (youtube) Estructuras b\u00e1sicas en C++ (youtube) C++ Programming Video Tutorials For Beginners [ Complete Series ] INPUT / OUTPUT: Yet again on C++ input/output \u00bfQu\u00e9 es mejor para leer input / imprimir output? cin/cout vs printf/scanf Tips de implementaci\u00f3n en C++ (muy \u00fatiles en progcomp) Cosas \u00fatiles que deber\u00edan saber de C++11 (PARA ESCRIBIR C\u00d3DIGOS M\u00c1S CORTOS Y ELEGANTES) : Tutorial: C++11 for programming contests Learn C++ 11 in 20 Minutes - Part I Learn C++ 11 in 20 Minutes - Part II Los beneficios de usar references (&) y pointers (*) ( para no copiar todo por valor y as\u00ed ser m\u00e1s eficientes ): Diferencia entre references y pointers explicada (\\<\\<\\<\\< muy buen art\u00edculo, 100% recomendado) geeksforgeeks - Passing vector to a function in C++ geeksforgeeks - When do we pass arguments by reference or pointer? Codeforces - Manejo de Strings en C++ ( buenos tips para cuando tienen que leer input ) Youtube playlist: lista exhaustiva de videos cubriendo much\u00edsimos aspectos de C++ STL: standard template library (buen material sobre la standard library de C++, MUY RECOMENDADO ) Introduction of STL #1: Overview Introduction of STL #2: Sequence Containers Introduction of STL #3: Associative Containers Introduction of STL #4: Unordered Containers Introduction of STL #5: Iterators and Algorithms Introduction of STL #6: Functors Topcoder: power up c++ with the standard template library part 1 Topcoder: power up c++ with the standard template library part 2 Youtube playlist: varios algoritmos de la librer\u00eda est\u00e1ndar de C++ para llegar y usar Para aprender a trabajar con bits (operaciones bitwise): Tutorial sobre Bitwise Operators \u00bfQu\u00e9 es bit masking? geeksforgeeks - Bitwise hacks for competitive programming geeksforgeeks - Bit Tricks for competitive programming \u00bfQu\u00e9 son y para qu\u00e9 sirven Structs y Classes en C++? Advanced C++: Struct Vs. Class Introduction to Structures in C++ CPP Programming Video Tutorial Buckys C++ Programming Tutorials - 12 - Introduction to Classes and Objects Structure and Class differences in C++ C ++ Tutorial Mr. Kishore CLASSES vs STRUCTS in C++ C++ Cheat Sheets & Tricks: C++ Cheat Sheet for ACM ICPC Aqu\u00ed pueden encontrar un C++ Solution Template (c\u00f3digo que uno siempre escribe al comenzar una soluci\u00f3n) + MUCHO MUCHO m\u00e1s :) C++ STL cheatsheet for competitive programming C++ Tricks C++ tricks for competitive programming (for C++ 11) C++ Cheat Sheet de Pablo Messina","title":"C++"},{"location":"resources/cpp/#c","text":"Ejemplo de Hello World #include <bits/stdc++.h> //importa todo using namespace std ; //para no escribir std:: int main () { printf ( \"Hello world \\n \" ); //Usando syntax de C cout << \"Hello world \\n \" ; //Usando streams de C++ return 0 ; } Ejemplo de Template #pragma GCC optimize(\"Ofast\") #include <bits/stdc++.h> using namespace std ; // defines #define rep(i,a,b) for(int i = a; i < b; ++i) #define invrep(i,b,a) for(int i = b; i >= a; --i) #define umap unordered_map #define uset unordered_set #define ff first #define ss second // typedefs typedef pair < int , int > ii ; typedef unsigned long long int ull ; typedef long long int ll ; // ------------------------------- int main () { ios :: sync_with_stdio ( false ); cin . tie ( 0 ); return 0 ; }","title":"C++"},{"location":"resources/cpp/#instalando-c","text":"Windows: Using GCC with MinGW MSYS2 Ubuntu: Instalar sudo apt-get install g++ Compilar en Ubuntu Mac: Installer en OSX Compilar con CLang","title":"Instalando C++:"},{"location":"resources/cpp/#compilando-y-ejecutando-codigo-en-c","text":"Ejemplo de secuencia de pasos para resolver un problema en C++ en Windows usando la terminal (en Linux/Mac es bien parecido): - Crear un archivo example.cpp - Escribir un c\u00f3digo de C++ v\u00e1lido y guardar. - Abrir una terminal y navegar a la carpeta donde est\u00e1 el archivo. - Opci\u00f3n 1: - En la terminal, compilar y ejecutar con el comando: g++ -std=c++11 example.cpp && a.exe - Escribir el input directamente en la terminal - El output ir\u00e1 apareciendo poco a poco en la terminal (intercalado con el input) - Opci\u00f3n 2: - Crear un archivo en la carpeta donde est\u00e1n parados llamado input.txt, copiar y pegar el input ah\u00ed y guardar. - En la terminal, compilar y ejecutar con el comando: g++ -std=c++11 example.cpp && a.exe < input.txt - el output aparecer\u00e1 en la misma terminal - Opci\u00f3n 3: - Crear un archivo en la carpeta donde est\u00e1n parados llamado input.txt, copiar y pegar el input ah\u00ed y guardar. - En la terminal, compilar y ejecutar con el comando: g++ -std=c++11 example.cpp && a.exe < input.txt > output.txt - el output quedar\u00e1 guardado en el archivo output.txt","title":"Compilando y ejecutando c\u00f3digo en C++:"},{"location":"resources/cpp/#tutoriales-para-aprender-c","text":"(youtube) Intro a la Programaci\u00f3n Competitiva en C++ (\\<\\<\\<\\< video cortito, recomendado) C++ for Python Programmers (\\<\\<\\<\\< por si vienes de Python) C++ Tutorial (SOLO LEARN: EVERYONE CAN CODE) http://www.cplusplus.com/doc/tutorial/ https://www.hackerrank.com/domains/cpp LearnCpp Documentaci\u00f3n Oficial de C++ (youtube) Intro a C++ (youtube) Estructuras b\u00e1sicas en C++ (youtube) C++ Programming Video Tutorials For Beginners [ Complete Series ] INPUT / OUTPUT: Yet again on C++ input/output \u00bfQu\u00e9 es mejor para leer input / imprimir output? cin/cout vs printf/scanf","title":"Tutoriales para aprender C++"},{"location":"resources/cpp/#tips-de-implementacion-en-c-muy-utiles-en-progcomp","text":"Cosas \u00fatiles que deber\u00edan saber de C++11 (PARA ESCRIBIR C\u00d3DIGOS M\u00c1S CORTOS Y ELEGANTES) : Tutorial: C++11 for programming contests Learn C++ 11 in 20 Minutes - Part I Learn C++ 11 in 20 Minutes - Part II Los beneficios de usar references (&) y pointers (*) ( para no copiar todo por valor y as\u00ed ser m\u00e1s eficientes ): Diferencia entre references y pointers explicada (\\<\\<\\<\\< muy buen art\u00edculo, 100% recomendado) geeksforgeeks - Passing vector to a function in C++ geeksforgeeks - When do we pass arguments by reference or pointer? Codeforces - Manejo de Strings en C++ ( buenos tips para cuando tienen que leer input ) Youtube playlist: lista exhaustiva de videos cubriendo much\u00edsimos aspectos de C++ STL: standard template library (buen material sobre la standard library de C++, MUY RECOMENDADO ) Introduction of STL #1: Overview Introduction of STL #2: Sequence Containers Introduction of STL #3: Associative Containers Introduction of STL #4: Unordered Containers Introduction of STL #5: Iterators and Algorithms Introduction of STL #6: Functors Topcoder: power up c++ with the standard template library part 1 Topcoder: power up c++ with the standard template library part 2 Youtube playlist: varios algoritmos de la librer\u00eda est\u00e1ndar de C++ para llegar y usar Para aprender a trabajar con bits (operaciones bitwise): Tutorial sobre Bitwise Operators \u00bfQu\u00e9 es bit masking? geeksforgeeks - Bitwise hacks for competitive programming geeksforgeeks - Bit Tricks for competitive programming \u00bfQu\u00e9 son y para qu\u00e9 sirven Structs y Classes en C++? Advanced C++: Struct Vs. Class Introduction to Structures in C++ CPP Programming Video Tutorial Buckys C++ Programming Tutorials - 12 - Introduction to Classes and Objects Structure and Class differences in C++ C ++ Tutorial Mr. Kishore CLASSES vs STRUCTS in C++","title":"Tips de implementaci\u00f3n en C++ (muy \u00fatiles en progcomp)"},{"location":"resources/cpp/#c-cheat-sheets-tricks","text":"C++ Cheat Sheet for ACM ICPC Aqu\u00ed pueden encontrar un C++ Solution Template (c\u00f3digo que uno siempre escribe al comenzar una soluci\u00f3n) + MUCHO MUCHO m\u00e1s :) C++ STL cheatsheet for competitive programming C++ Tricks C++ tricks for competitive programming (for C++ 11) C++ Cheat Sheet de Pablo Messina","title":"C++ Cheat Sheets &amp; Tricks:"},{"location":"resources/cpp/cpp_osx/","text":"Compiladores de C++ para OSX Default OSX en general ya tiene instalado g++ y clang, esto se puede revisar haciendo lo siguiente en alg\u00fan terminal which g++ con lo cual deber\u00eda salir /usr/bin/g++ . Igualmente con clang, which clang y deber\u00eda salir /usr/bin/clang Usando Brew \u00bfQu\u00e9 es Brew? Brew es un packet manager para OSX, es f\u00e1cil de usar. Su p\u00e1gina es esta . Instalar g++ Cuando uno quiere instalar g++ uno busca gcc brew search gcc Con esto aparecen varias opciones, por ejemplo gcc@7 . Para instalarlo se usa brew install gcc@7 Y una vez instalado uno lo usa de la siguiente forma g++-7 input_file.cpp","title":"Compiladores de C++ para OSX"},{"location":"resources/cpp/cpp_osx/#compiladores-de-c-para-osx","text":"","title":"Compiladores de C++ para OSX"},{"location":"resources/cpp/cpp_osx/#default","text":"OSX en general ya tiene instalado g++ y clang, esto se puede revisar haciendo lo siguiente en alg\u00fan terminal which g++ con lo cual deber\u00eda salir /usr/bin/g++ . Igualmente con clang, which clang y deber\u00eda salir /usr/bin/clang","title":"Default"},{"location":"resources/cpp/cpp_osx/#usando-brew","text":"","title":"Usando Brew"},{"location":"resources/cpp/cpp_osx/#que-es-brew","text":"Brew es un packet manager para OSX, es f\u00e1cil de usar. Su p\u00e1gina es esta .","title":"\u00bfQu\u00e9 es Brew?"},{"location":"resources/cpp/cpp_osx/#instalar-g","text":"Cuando uno quiere instalar g++ uno busca gcc brew search gcc Con esto aparecen varias opciones, por ejemplo gcc@7 . Para instalarlo se usa brew install gcc@7 Y una vez instalado uno lo usa de la siguiente forma g++-7 input_file.cpp","title":"Instalar g++"}]}